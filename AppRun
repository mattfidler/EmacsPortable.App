#!/bin/bash
YAD=`which yad`
SOURCE="${BASH_SOURCE[0]}"
DIR="$( dirname "$SOURCE" )"
OPWD=`pwd`

while [ -h "$SOURCE" ]
do 
    SOURCE="$(readlink "$SOURCE")"
    [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
    DIR="$( cd -P "$( dirname "$SOURCE"  )" && pwd )"
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

function download_file {
    xterm -e wget $1
}

EMACS_DAEMON_LOG=$DIR/Data/saves/emacs-daemon-log.txt

function emacsc_msg(){
    # This is adapted from https://gist.github.com/3864559
    $EMACSDIR/emacsclient --eval "(message \"$1\")" >/dev/null 2>&1
}

function emacsd_progress_start () { # show progress dialog
    # This is adapted from https://gist.github.com/3864559
    local w=0.3
    local i=0
    local N=0
    # no approximation: just move the progress bar
    if [ -f "$EMACS_DAEMON_LOG" ]; then
        w=0.05
        N=`wc -l "$EMACS_DAEMON_LOG" | cut -f 1 -d ' '`
        echo > "$EMACS_DAEMON_LOG"
    fi
    
    function emacsd_progress_next() {
        if [ "$N" == "0" ]; then
            (( i+=1 ))
            if [ $i -ge 100 ]; then
                i=99
            fi
        else
            i=`wc -l "$EMACS_DAEMON_LOG" | cut -f 1 -d ' '`
            (( i=$i*99/$N ))
        fi
    }
    
    function emacsd_progress () {
        while (( i < 100 )); do
            emacsc_msg 'ping' && echo 100 && return # the server is responding
            echo $i
            sleep $w
            emacsd_progress_next
        done
    }
    if emacsc_msg 'ping'; then
        $EMACSDIR/emacsclient -c "$@"
    else
        echo "Start Daemon"
        $EMACSDIR/emacs-$EMACSVER --daemon $OPT >& $EMACS_DAEMON_LOG & 
        if [ "$YAD" != "" ]; then
            emacsd_progress | yad --progress --auto-close \
                --text "Starting Emacs daemon..."
        else
            emacsd_progress
        fi
        ## Now try starting Emacs.
        $EMACSDIR/emacsclient -c "$@"
        while [ $? -eq 1 ]; do
            sleep $w
            $EMACSDIR/emacsclient -c "$@"
        done
    fi
}

function startup_options {
    if [ "$YAD" != "" ]; then
        MACVER=""
        WINVER=""
        LINVER=""
        for ver in $DIR/App/emacs-*; do
            VER2=`echo $ver | sed s#$DIR/App/emacs-##`
            FOUND=0
            ISWIN=`cat $DIR/Data/ini/EmacsPortableApp.ini | grep -e "^ *[Vv]ersion *= *$VER2 *"`
            ISMAC=`cat $DIR/Data/ini/EmacsPortableApp.ini | grep -e "^ *[Mm]ac[Vv]ersion *= *$VER2 *"`
            ISLIN=`cat $DIR/Data/ini/EmacsPortableApp.ini | grep -e "^ *[Ll]inux[Vv]ersion *= *$VER2 *"`
            if [ -e $ver/bin/emacs.exe ]; then
                FOUND=1
                WINVER="$WINVER!$VER2"
            elif [ -e $ver/bare-bin.7z ]; then
                FOUND=1
                WINVER="$WINVER!$VER2"
            fi
            if [ "$FOUND" == "1" ]; then
                LINVER="$LINVER!$VER2"
                if [ -e $ver/MacOS/Emacs ]; then
                    MACVER="$MACVER!$VER2"
                fi
            fi
            if [ "$ISWIN" != "" ]; then
                WINVER=$VER2$WINVER
            fi
            if [ "$ISMAC" != "" ]; then
                MACVER=$VER2$MACVER
            fi
            if [ "$ISLIN" != "" ]; then
                LINVER=$VER2$LINVER
            fi
        done
        STARTOPT=""
        for start in $DIR/Data/start/*; do
            START2=`echo $start | sed s#$DIR/Data/start/##`
            if [ "$START2" == "shared" ]; then
                echo "Skipping shared"
            elif [ "$START2" == "system" ]; then
                echo "Skipping system"
            elif [ "$START2" == "user" ]; then
                echo "Skipping user"
            else
                
                STARTOPT="$STARTOPT!$START2"
                ISSTART=`cat $DIR/Data/ini/EmacsPortableApp.ini | grep -e "^ *[Ss]tartup *= *$START2"`
                if [ "$ISSTART" != "" ]; then
                    STARTOPT="$START2$STARTOPT"
                fi
            fi
        done
        ISDAEMON=`cat $DIR/Data/ini/EmacsPortableApp.ini | grep -e "^ *[Dd]aemon *= *1 *"`
        if [ "$ISDAEMON" != "" ]; then
            ISDAEMON="TRUE"
        else
            ISDAEMON="FALSE"
        fi
        EPFG=$(sed -n 's/.*[Ff]oreground *= *\([^ ]*.*\)/\1/p' < $DIR/Data/ini/EmacsPortableApp.ini)
        EPBG=$(sed -n 's/.*[Bb]ackground *= *\([^ ]*.*\)/\1/p' < $DIR/Data/ini/EmacsPortableApp.ini)
        ## I'm not sure why, but colors are not being passed right.
        FRM=$(yad --form \
            --separator=' ' \
            --title "Startup Options" \
            --field "Linux Version":CB "$LINVER" \
            --field "Mac Version":CB "$MACVER" \
            --field "Windows Version":CB "$WINVER" \
            --field "Startup Script":CB "$STARTOPT" \
            --field "Use Emacs Daemon":CHK $ISDAEMON )
        if [ "$FRM" == "" ]; then
            echo "Canceled Form"
        else
            read -r -a ARRAY <<< $FRM
            if [ "${ARRAY[4]}" == "TRUE" ]; then
                ISDAEMON=1
            else
                ISDAEMON=0
            fi
            cp $DIR/Data/ini/EmacsPortableApp.ini /tmp/epi.ini
            sed "s#^ *[Vv]ersion *=.*#Version=${ARRAY[2]}#" /tmp/epi.ini | \
                sed "s#^ *[Mm]ac[Vv]ersion *=.*#MacVersion=${ARRAY[1]}#" | \
                sed "s#^ *[Ll]inux[Vv]ersion *=.*#LinuxVersion=${ARRAY[0]}#" | \
                sed "s#^ *[Dd]aemon *=.*#Daemon=$ISDAEMON#" | \
                sed "s#^ *[Ss]tartup *=.*#Startup=${ARRAY[3]}#" > $DIR/Data/ini/EmacsPortableApp.ini
            unix2dos $DIR/Data/ini/EmacsPortableApp.ini
            rm /tmp/epi.ini
        fi
        
    fi
}
function setup_emacs {
    GLIBVER=`ldd --version | grep ldd | sed 's|.*) ||g'`
    MACHINE_TYPE=`uname -m`
    GLIBVER=$MACHINE_TYPE-$GLIBVER
    EMACSDIR=$DIR/App/linux-$GLIBVER
    EPUSB=`echo $EMACSDIR | sed 's/\(\/mnt\/[^\/]*\/\).*/\1/'`
    EPOTHER=`echo $EMACSDIR | sed 's/\/App.*/\/Other\//'`
    DICPATH=`echo $EMACSDIR | sed 's/\/App.*/\/App\/hunspell\/epdic/'`
    DATPATH=`echo $EMACSDIR | sed 's/\/App.*/\/Data/'`
    EXEDIR=`echo $EMACSDIR | sed 's/\/App.*/\//'`
    OHOME=$HOME
    TEMP=/tmp/
    
##Get what version of Emacs is specified.
    EMACSAPP=`echo $EMACSDIR | sed 's/\/App.*/\/App/'`
    EMACSDAT=`echo $EMACSDIR | sed 's/\/App.*/\/Data/'`
    
    cp $EMACSDAT/ini/EmacsPortableApp.ini /tmp/epi.ini
    
    EPINI=/tmp/epi.ini
    EMACSVER=`cat $EPINI | grep "[Ll]inux[vV]ersion *= *" | tr -d '\15' | cut -f 2 -d "="`
    GEOMETRY=`cat $EPINI | grep "[Gg]eometry *= *" | tr -d '\15' | cut -f 2 -d "="`
    FOREGROUND=`cat $EPINI | grep "[Ff]oreground *= *" | tr -d '\15' | cut -f 2 -d "="`
    BACKGROUND=`cat $EPINI | grep "[Bb]ackground *= *" | tr -d '\15' | cut -f 2 -d "="`
    DAEMON=`cat $EPINI | grep "[Dd]aemon *= *" | tr -d '\15' | cut -f 2 -d "="`
    
    MAXIMIZED=`cat $EPINI | grep "[Mm]ax *= *" | tr -d '\15' | cut -f 2 -d "="`
    
    FULLWIDTH=`cat $EPINI | grep "[Ff]ull[Ww]idth *= *" | tr -d '\15' | cut -f 2 -d "="`
    
    FULLHEIGHT=`cat $EPINI | grep "[Ff]ull[Hh]eight *= *" | tr -d '\15' | cut -f 2 -d "="`
    EPSTART=`cat $EPINI | grep "[Ss]tartup *= *" | tr -d \15 | cut -f 2 -d "="`
    
    OPT=""
    
## if [ "$GEOMETRY"  != "" ]; then
##     OPT="$OPT --geometry $GEOMETRY"
## fi
    
    if [ "$FOREGROUND" != "" ]; then
        OPT="$OPT -fg $FOREGROUND"
    fi
    
    if [ "$BACKGROUND" != "" ]; then
        OPT="$OPT -bg $BACKGROUND"
    fi
    
## if [ "$MAXIMIZED" == "1" ]; then
##    OPT="$OPT -mm"
## fi
    
## if [ "$FULLWIDTH" == "1" ]; then
##    OPT="$OPT -fw"
## fi
    
## if [ "$FULLHEIGHT" == "1" ]; then
##    OPT="$OPT -fh"
## fi
    
    m## Set Emacs Specific Directories
    
    
    EMACSDATA="${EMACSAPP}/emacs-${EMACSVER}/etc"
    EMACSDOC="${EMACSAPP}/emacs-${EMACSVER}/etc"
    
    EMACSLOADPATH=$EMACSAPP/emacs-$EMACSVER/lisp/:$EMACSAPP/site-lisp/
    
## Compile if not present
    if [ ! -e "$EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER/bin/emacs-$EMACSVER" ]; then
        if [ ! -e $EMACSAPP/emacs-$EMACSVER.tar.bz2 ]; then
            cd $EMACSAPP
            download_file  http://ftpmirror.gnu.org/emacs/emacs-$EMACSVER.tar.bz2 "Emacs $EMACSVER Source" 
            cd -
        fi
        cp $EMACSAPP/emacs-$EMACSVER.tar.bz2 /tmp
        cd /tmp
        xterm -e tar -xvjf emacs-$EMACSVER.tar.bz2
        cd /tmp/emacs-$EMACSVER
    ## export CFLAGS="-m32 -march=i486"
    ## export CXXFLAGS="-m32 -march=i486"
        GCCVER=`gcc --version | grep gcc | sed 's|.*) ||g'`
        xterm -e ./configure \
            --bindir=/tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/linux-$GLIBVER/bin \
            --libexecdir=/tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/linux-$GLIBVER/libexec \
            --datadir=/tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/etc \
            --info=/tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/info \
            --prefix=/tmp/emacs-$EMACSVER-bin
        xterm -e make
        xterm -e make install
        rm -rfv /tmp/emacs-$EMACSVER
        cd /tmp/emacs-24.2-bin/App/emacs-$EMACSVER/linux-$GLIBVER/bin
    #sed -i -e 's~/etc[^e]*emacs[^l]*liem~liem~g' emacs-$EMACSVER
    #sed -i -e 's~/etc[^e]*emacs[^l]*lisp~lisp~g' emacs-$EMACSVER
    #sed -i -e 's~/etc[^e]*emacs[^l]*site-lisp~site-lisp~g' emacs-$EMACSVER
    #sed -i -e 's~/etc[^e]*emacs[^l]*etc~etc~g' emacs-$EMACSVER
    #sed -i -e 's~/tmp[^t]*emacs-[0-9.]+-bin~././//././//~g' emacs-$EMACSVER
    ## Move scores to the proper place snake-places and tetris-places
        rm -rfv /tmp/emacs-$EMACSVER-bin/App/etc
        rm -rfv /tmp/emacs-$EMACSVER-bin/App/info
        rm -rfv /tmp/emacs-$EMACSVER-bin/lib
        rm -rfv /tmp/emacs-$EMACSVER-bin/share
        
        mkdir /tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/linux-$GLIBVER/lib
        for lib in `ldd /tmp/emacs-24.2-bin/App/emacs-24.2/linux-$GLIBVER/bin/emacs-* | sed 's/.*=> *\(.*\) (.*)/\1/g'  | sed 's/.* *(.*) *//' | sed '/^$/d'`; do
            cp -v ${lib} /tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/linux-$GLIBVER/lib
        done
        mkdir $EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER
        cp -rv /tmp/emacs-$EMACSVER-bin/App/emacs-$EMACSVER/linux-$GLIBVER/* $EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER
        xterm -e rm -rfv /tmp/emacs-$EMACSVER-bin /tmp/emacs-$EMACSVER.tar.bz2
        cd $OPWD
    fi
    
    EMACSDIR=$EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER/bin

    LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:$EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER/lib

    chmod +x $EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER/bin/*

    CWD=`pwd`
    cd $EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER/libexec/*/*/*/
    chmod +x *
    LIBDIR=`pwd`
    cd ${CWD}
    
    PATH=${PATH}:$EMACSAPP/emacs-$EMACSVER/linux-$GLIBVER/bin:${LIBDIR}

    OPHOME=`cat $EPINI | egrep "[Hh]ome *= *" | tr -d '\15' | cut -f 2 -d "=" | sed 's/\\\\/\\//g' | sed 's/\\/$//'`
    
    OPTYPE=`echo $OPHOME | sed 's/\(USB\).*/\1/' | sed 's/\(EXEDIR\).*/\1/'`

    if [ "$OPTYPE" == "EXEDIR" ]; then
        OPHOME=`echo $OPHOME | sed 's/EXEDIR:\///'`
        HOME="$EXEDIR$OPHOME"
        export HOME 
    fi
    
    if [ "$OPTYPE" == "USB" ]; then
        OPHOME=`echo $OPHOME | sed 's/USB:\///'`
        HOME="$EPUSB$OPHOME"
        export HOME
    fi
    
#HOME=$EPUSB/Documents

    echo HOME: $HOME
    echo OPHOME: $OPHOME
    echo OPTYPE: $OPTYPE
    echo EPUSB: $EPUSB
    echo EPOTHER: $EPOTHER
    echo TEMP: $TEMP
    echo DICPATH: $DICPATH
#echo PATH: $PATH
    echo EMACSDIR: $EMACSDIR

    echo EMACSVER: $EMACSVER

    echo EMACSAPP: $EMACSAPP
    echo EMACSDATA: $EMACSDATA
    echo EMACSLOADPATH: $EMACSLOADPATH
    echo GEOMETRY: $GEOMETRY
    echo FOREGROUND: $FOREGROUND
    echo BACKGROUND: $BACKGROUND
    echo OPT: $OPT
    echo DATPATH: $DATPATH
    echo EPSTART: $EPSTART
    
    EPSTARTDIR=$EMACSAPP/../Data/start/$EPSTART
    echo EPSTARTDIR: $EPSTARTDIR

    if [ -e $DATPATH/ini/Environment.ini ]; then
        rm /tmp/ep-environment.sh
        sed 's/\[[Ee]nvironment\]/#!\/bin\/bash/' $DATPATH/ini/Environment.ini | sed 's/\(.*\)=\(.*\)/\1="\2"; export \1/' > /tmp/ep-environment.sh
        echo "" >> /tmp/ep-environment.sh
        ./flip.osx -u /tmp/ep-environment.sh
        source /tmp/ep-environment.sh
    fi
    
    if [ -e $DATPATH/start/shared/Environment.ini ]; then
        rm /tmp/ep-environment.sh
        sed 's/\[[Ee]nvironment\]/#!\/bin\/bash/' $DATPATH/start/shared/Environment.ini | sed 's/\(.*\)=\(.*\)/\1="\2"; export \1/' > /tmp/ep-environment.sh
        echo "" >> /tmp/ep-environment.sh
        source /tmp/ep-environment.sh
    fi
    
    
    
    echo ERGOEMACS_KEYBOARD_LAYOUT: $ERGOEMACS_KEYBOARD_LAYOUT
    
    export OHOME
    export EPUSB
    export EPOTHER
    export TEMP
    export DICPATH
    export PATH
    export EMACSDIR
    export EMACSDATA
    export EMACSLOADPATH
    export EMACSDOC
    export EMACSVER 
    export EPSTART
    export EPSTARTDIR
##export LD_LIBRARY_PATH
    
    REALVER=`$EMACSDIR/emacs-$EMACSVER --version 2>&1 | head -n1 | sed 's/[^0-9]*\([0-9].*\)/\1/'`
    
    
    echo REALVER: $REALVER
    
    if [ ! -e $EMACSDATA/DOC-$REALVER ]; then
        cp $EMACSDATA/DOC-X $EMACSDATA/DOC-$REALVER
    fi 
    
    echo  $OPT
    rm $EPINI
    
}
if [ "$1" == "--kill-emacs" ]; then
    setup_emacs
    $EMACSDIR/emacsclient -e '(linux-client-save-kill-emacs)'
elif [ "$1" == "--startup-options" ]; then
    startup_options
else
    setup_emacs
    if [ "$DAEMON" == "1" ]; then 
        emacsc_msg 'ping'
        if [ $? -eq 1 ]; then
            emacsd_progress_start
        else
            $EMACSDIR/emacsclient -c "$@"
        fi
    else
        $EMACSDIR/emacs-$EMACSVER $OPT "$@"
    fi
fi



