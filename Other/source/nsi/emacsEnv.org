#+TITLE: Environment Setup
#+AUTHOR: Matthew L. Fidler
#+PROPERTY: tangle EmacsEnv.nsh
* Introduction
This sets up the Emacs Path and environment.  
* Find Environment Information
** Variables
#+BEGIN_SRC nsis
 Var usb
 Var usbs
#+END_SRC
** StrSlash
#+BEGIN_SRC nsis
  ## StringSlash
  !macro _StrSlash FILENAME SLASH
    Push "${FILENAME}"
    Push "${SLASH}"
    Call StrSlashFn
    Pop $R0
  !macroend
  !define StrSlash `!insertmacro _StrSlash`
  ; Push $filenamestring (e.g. 'c:\this\and\that\filename.htm')
  ; Push "\"
  ; Call StrSlash
  ; Pop $R0
  ; ;Now $R0 contains 'c:/this/and/that/filename.htm'
  Function StrSlashFn
    Exch $R3 ; $R3 = needle ("\" or "/")
    Exch
    Exch $R1 ; $R1 = String to replacement in (haystack)
    Push $R2 ; Replaced haystack
    Push $R4 ; $R4 = not $R3 ("/" or "\")
    Push $R6
    Push $R7 ; Scratch reg
    StrCpy $R2 ""
    StrLen $R6 $R1
    StrCpy $R4 "\"
    StrCmp $R3 "/" loop
    StrCpy $R4 "/"
    
    loop:
      StrCpy $R7 $R1 1
      StrCpy $R1 $R1 $R6 1
      StrCmp $R7 $R3 found
      StrCpy $R2 "$R2$R7"
      StrCmp $R1 "" done loop
      
    found:
      StrCpy $R2 "$R2$R4"
      StrCmp $R1 "" done loop
      
    done:
      StrCpy $R3 $R2
      Pop $R7
      Pop $R6
      Pop $R4
      Pop $R2
      Pop $R1
      Exch $R3
  FunctionEnd
#+END_SRC
** Get Directory MD5
#+BEGIN_SRC nsis
  !macro GetMD5 DIR OUTPUTVAR
    Push ${DIR}
    Call GetMD5
    Pop ${OUTPUTVAR}
  !macroend
  var GetMD5EP
  var GetMD5PT
  !define GetMD5 `!insertmacro GetMD5`
  Function GetMD5
    ## Gets the MD5 of the directory
    Push $0
    Exch
    Push $1
    Exch
    Push $2
    Exch
    Push $3
    Exch
    Pop $2
    StrCpy $3 ""
    FindFirst $0 $1 $2
    loop:
      StrCmp $1 "" done
      StrCpy $3 "$1$3"
      FindNext $0 $1
      Goto loop
    done:
      FindClose $0
      StrCmp $GetMD5EP "" 0 +3
      md5dll::GetMD5File "$EPEXE\EmacsPortableApp.exe"
      Pop $GetMD5EP
      StrCmp $GetMD5PT "" 0 +3
      md5dll::GetMD5File "$EPEXE\App\ini\paths.ini"
      Pop $GetMD5PT
      md5dll::GetMD5String "$GetMD5EP$GetMD5PT$3"
      Exch
      Pop $3
      Exch
      Pop $2
      Exch
      Pop $1
      Exch
      Pop $0
  FunctionEnd
  
#+END_SRC
** Get Computer Name
Adapted from http://nsis.sourceforge.net/Your_Computer_Name
#+BEGIN_SRC nsis
  Function GetComputerName
    Push $0
    Push $1
    ReadRegStr $0 HKLM "System\CurrentControlSet\Control\ComputerName\ActiveComputerName" "ComputerName"
    StrCmp $0 "" win9x
    StrCpy $1 $0 4 3
    Goto done
    win9x:
      ReadRegStr $0 HKLM "System\CurrentControlSet\Control\ComputerName\ComputerName" "ComputerName"
      StrCpy $1 $0 4 3
    done:
      Push $0
      Exch
      Pop $1
      Exch
      Pop $0
      ClearErrors
  FunctionEnd
  
  !macro GetComputerName VAR
    Call GetComputerName
    Pop ${Var}
  !macroEnd
  !define GetComputerName `!insertmacro GetComputerName`
  
#+END_SRC

** Get Drive Variables
#+BEGIN_SRC nsis
  Var globalMD5
  
  Function GetPortable
    ; $9    "drive letter"  (a:\ c:\ ...)
    ; $8    "drive type"    (FDD HDD ...)
    DetailPrint "Checking Drive $9 ($EPEXE\App\ini\paths.ini)"
    StrCpy $globalMD5 ""
    ${GetMD5} "$9" $R3 
    DetailPrint "MD5: $R3"
    ReadIniStr $R4 "$EPEXE\Data\ini\portable-cache.ini" "portable" "MD5"
    ${If} $R4 == "$R3"
      ReadIniStr $R0 "$EPEXE\Data\ini\portable-cache.ini" "portable" "Drive"
      ${If} "$R0" != "$9"
        ${RIF} "$EPEXE\Data\ini\portable-cache.ini" "$R0" "$9"
      ${EndIf}
      StrCpy $globalMD5 "1"
      StrCpy "$R8" "StopGetDrives"
      Goto done_portable
    ${EndIf}
    DeleteIniSec "$EPEXE\Data\ini\portable-cache.ini" "portable"
    WriteIniStr "$EPEXE\Data\ini\portable-cache.ini" "portable" "MD5" "$R3"
    WriteIniStr "$EPEXE\Data\ini\portable-cache.ini" "portable" "Drive" "$9"
    
    
    ## Now look for each portable Directory.
    StrCpy $R8 ""
    EnumINI::Section "$EPEXE\App\ini\paths.ini" "portable.dirs"
    Pop $R0
    StrCmp $R0 "error" done_portable
    loop_portable:
      IntCmp $R0 "0" done_portable done_portable 0
      Pop $R1
      ReadINIStr $R2 "$EPEXE\App\ini\paths.ini" "portable.dirs" "$R1"
      DetailPrint "Check $9$R1 ($R2)"
      Call AddPortable
      ${If} $R9 != ""
        StrCpy $R8 "$R9"
      ${EndIf}
    next_portable:
      IntOp $R0 $R0 - 1
      Goto loop_portable
      
    done_portable:
    search_local:
      ${If} $R8 == "StopGetDrives"
        Push $0
        Push $R0
        System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("EPTXT", "EmacsPortable@$9").r0'
        ${StrSlash} "$9" "\"
        System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("EPUSB", "$R0").r0'
        StrCpy $usb "$9"
        StrCpy $usbs "$9" -1
        Pop $R0
        Pop $0
      ${EndIf}
      Push $R8
      ;Push $var    ; If $var="StopGetDrives" Then exit from function
  FunctionEnd
  
  !macro AddIt WHAT CACHE PATHS
    Function Add${WHAT}
      ## Searches for ${WHAT} Appliactions to add to the directory
      ; $9 -- Drive Letter
      ; $R1 -- ${WHAT} Directories
      DetailPrint "Checking $9$R1"
      IfFileExists "$9$R1" 0 not_found
      ${GetMD5} "$9$R1" $R3 
      DetailPrint "MD5: $R3"
      ReadIniStr $R4 "${CACHE}" "$R1" "MD5"
      StrCmp $R4 $R3 done
      DeleteIniSec "${CACHE}" "$R1"
      WriteIniStr "${CACHE}" "$R1" "MD5" "$R3"
      WriteIniStr "${CACHE}" "$R1" "Drive" "$9"
      EnumINI::Section "${PATHS}" "${WHAT}"
      Pop $R3
      StrCmp $R3 "error" done_${WHAT}
      loop_${WHAT}:
        IntCmp $R3 "0" done_${WHAT} done_${WHAT} 0    
        Pop $R4
        ReadINIStr $R5 "${PATHS}" "${WHAT}" "$R4"
        DetailPrint "Checking $9$R1\$R5"
        IfFileExists "$9$R1\$R5" 0 next_${WHAT}
        ReadIniStr $R6 "${CACHE}" "$R1" "PATH"
        ClearErrors
        GetFullPathName /SHORT $R7 "$9$R1\$R5"
        ${If} $R6 == ""
          StrCpy "$R6" "$R7"
        ${Else}
          StrCpy "$R6" "$R6;$R7"
        ${EndIf}
        WriteIniStr "${CACHE}" "$R1" "PATH" "$R6"
        EnumINI::Section "${PATHS}" "${WHAT}.$R4.path"
        Pop $R5
        StrCmp $R5 "error" done_env
      loop_env:
        IntCmp $R5 "0" done_env done_env 0
        Pop $R6
        ReadIniStr $R7 "${PATHS}" "${WHAT}.$R4.path" "$R6"
        GetFullPathName /SHORT $R7 "$9$R1\$R7"
        WriteIniStr "${CACHE}" "$R1" "$R6" "$R7"
        IntOp $R5 $R5 - 1
        Goto loop_env
      done_env:
        EnumINI::Section "${PATHS}" "${WHAT}.$R4.set"
        Pop $R5
        StrCmp $R5 "error" done_set
      loop_set:
        IntCmp $R5 "0" done_set done_set 0
        Pop $R6
        ReadIniStr $R7 "${PATHS}" "${WHAT}.$R4.set" "$R6"
        WriteIniStr "${CACHE}" "$R1" "$R6" "$R7"
        IntOp $R5 $R5 - 1
        Goto loop_set
      done_set:
        
      next_${WHAT}:
        IntOp $R3 $R3 - 1
        Goto loop_${WHAT}
      done_${WHAT}:
        EnumINI::Section "${PATHS}" "${WHAT}.man"
        Pop $R3
        StrCmp "$R3" "error" done_man_${WHAT}
      loop_man_${WHAT}:
        IntCmp $R3 "0" done_man_${WHAT} done_man_${WHAT} 0
        Pop $R4
        ReadINIStr $R5 "${PATHS}" "${WHAT}.man" "$R4"
        DetailPrint "Checking $9$R1\$R5"
        IfFileExists "$9$R1\$R5" 0 next_man_${WHAT}
        ReadIniStr $R6 "${CACHE}" "$R1" "MANPATH"
        ClearErrors
        GetFullPathName /SHORT $R7 "$9$R1\$R5"
        ${If} $R6 == ""
          StrCpy "$R6" "$R7"
        ${Else}
          StrCpy "$R6" "$R6;$R7"
        ${EndIf}
        WriteIniStr "${CACHE}" "$R1" "MANPATH" "$R6"
      next_man_${WHAT}:
        IntOp $R3 $R3 - 1
        Goto loop_man_${WHAT}
      done_man_${WHAT}:
  
        EnumINI::Section "${PATHS}" "${WHAT}.info"
        Pop $R3
        StrCmp "$R3" "error" done_info_${WHAT}
      loop_info_${WHAT}:
        IntCmp $R3 "0" done_info_${WHAT} done_info_${WHAT} 0
        Pop $R4
        ReadINIStr $R5 "${PATHS}" "${WHAT}.info" "$R4"
        DetailPrint "Checking $9$R1\$R5"
        IfFileExists "$9$R1\$R5" 0 next_info_${WHAT}
        ReadIniStr $R6 "${CACHE}" "$R1" "INFOPATH"
        ClearErrors
        GetFullPathName /SHORT $R7 "$9$R1\$R5"
        ${If} $R6 == ""
          StrCpy "$R6" "$R7"
        ${Else}
          StrCpy "$R6" "$R6;$R7"
        ${EndIf}
        WriteIniStr "${CACHE}" "$R1" "INFOPATH" "$R6"
      next_info_${WHAT}:
        IntOp $R3 $R3 - 1
        Goto loop_info_${WHAT}
      done_info_${WHAT}:
        StrCpy $R9 "StopGetDrives"
        Goto done
      not_found:
        StrCpy $R9 ""
        DetailPrint "Not found, Delete cache $R1"
        DeleteIniSec "${CACHE}" "$R1"
      done:
        ClearErrors
    FunctionEnd
  !macroend
  
  Function GetExedir
    GetFullPathName /SHORT $R1  $EPEXE
    StrCpy $9 $R1 3
    StrCpy $R1 "$R1" "" 3
    ReadIniStr $R2 "$EPEXE\Data\ini\exedir-cache.ini" "$R1" "Drive"
    ${If} $R2 != ""
    ${AndIf} "$R2" != "$9"
      ${RIF} "$EPEXE\Data\ini\exedir-cache.ini" "$R2" "$9" 
    ${EndIf}
    Call AddExedir
  FunctionEnd
  
  Function GetLocaldir
    ${GetComputerName} $0
    DetailPrint "Computer Name: $0"
  
    GetFullPathName /SHORT $R1  $PROGRAMFILES
    StrCpy $9 $R1 3
    StrCpy $R1 "$R1" "" 3
    Call AddLocal
    
    GetFullPathName /SHORT $R1  $PROGRAMFILES32
    StrCpy $9 $R1 3
    StrCpy $R1 "$R1" "" 3
    Call AddLocal
    
    GetFullPathName /SHORT $R1  $PROGRAMFILES64
    StrCpy $9 $R1 3
    StrCpy $R1 "$R1" "" 3
    Call AddLocal
  
  FunctionEnd
  
  
  !insertmacro AddIt "portable" "$EPEXE\Data\ini\portable-cache.ini" "$EPEXE\App\ini\paths.ini"
  !insertmacro AddIt "exedir" "$EPEXE\Data\ini\exedir-cache.ini" "$EPEXE\App\ini\paths.ini"
  !insertmacro AddIt "local" "$EPEXE\Data\ini\$0-cache.ini" "$EPEXE\App\ini\paths.ini"
  
#+END_SRC

** Load Cache
#+BEGIN_SRC nsis
  
  Function LoadCache
    Pop $0
    EnumINI::SectionNames "$0"
    Pop $R0
    StrCmp $R0 "error" done_cache
    loop_cache:
      IntCmp $R0 "0" done_cache done_cache 0
      Pop $R1
      StrCmp $R1 "portable" next_cache
      StrCmp $globalMD5 "" skip_md5
      ReadIniStr $9 "$0" "$R1" "Drive"
      Call AddPortable
    skip_md5:
      EnumINI::Section "$0" "$R1"
      Pop $R2
      StrCmp "$R2" "error" next_cache
    loop_env:
      IntCmp $R2 "0" next_cache next_cache 0
      Pop $R3
      ReadIniStr $R4 "$0" "$R1" "$R3"
      ${If} $R3 == "PATH"
        DetailPrint "Path Add: $R4"
        System::Call 'Kernel32::GetEnvironmentVariable(t , t, i) i("PATH", .r3, ${NSIS_MAX_STRLEN}).r2'
        System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("PATH", "$R4;$3").r2'
      ${ElseIf} $R3 == "MANPATH"
        DetailPrint "Path Add: $R4"
        System::Call 'Kernel32::GetEnvironmentVariable(t , t, i) i("MANPATH", .r3, ${NSIS_MAX_STRLEN}).r2'
        System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("MANPATH", "$R4;$3").r2'
      ${ElseIf} $R3 == "INFOPATH"
        DetailPrint "Path Add: $R4"
        System::Call 'Kernel32::GetEnvironmentVariable(t , t, i) i("INFOPATH", .r3, ${NSIS_MAX_STRLEN}).r2'
        System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("INFOPATH", "$R4;$3").r2'
      ${ElseIf} $R3 != "Drive"
      ${AndIf} $R3 != "MD5"
        DetailPrint "Env: $R3=$R4"
        System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("$R3", "$R4").r2'
      ${EndIf}
    next_env:
      IntOp $R2 $R2 - 1
      Goto loop_env
    next_cache:
      IntOp $R0 $R0 - 1
      Goto loop_cache
    done_cache:
      ClearErrors
  FunctionEnd
  !macro LoadCache CACHE
    Push "${CACHE}"
    Call LoadCache
  !macroend
  
  !define LoadPortable `!insertmacro LoadCache "$EPEXE\Data\ini\portable-cache.ini"`
  !define LoadExedir `!insertmacro LoadCache "$EPEXE\Data\ini\exedir-cache.ini"`
  !define LoadLocal `!insertmacro LoadCache "$EPEXE\Data\ini\$0-cache.ini"`
  
#+END_SRC

** Setup Environment

#+BEGIN_SRC nsis
  !macro SetEnv
    ${If} $usb == ""
      ${GetDrives} "FDD+HDD" "GetPortable"
      Call GetExedir
      Call GetLocaldir
      ${LoadPortable}
      ${LoadExedir}
      ${GetComputerName} $0
      ${LoadLocal}
    ${EndIf}
  !macroend
  !define SetEnv `!insertmacro SetEnv`
  
#+END_SRC

** Convert File Name Function
This converts USB:/ and EXEDIR:/ to the appropriate values
#+BEGIN_SRC nsis
  Function ConvertToFile
    ;; $0= File
    ;; $1 = Temp
    ;; $R0 = File with backslashes.
    Push $0
    Exch
    Pop $0
    Push $1
    Push $R0
    ${StrSlash} "$0" "/"
    StrCpy $1 $R0 5
    StrCmp "$1" "USB:\" home_usb home_exe
    home_usb:
      StrCpy $R0 $R0 "" 5
      IfFileExists "$EPEXE\Data\ini\portable-cache.ini" 0 not_found
      ReadIniStr $R1 "$EPEXE\Data\ini\portable-cache.ini" "portable" "Drive"
      IfFileExists "$R1$R0" 0 not_found
      StrCpy "$usb" "$R1"
      Goto change_file
    not_found:
      Push $R0
      ${SetEnv}
      Pop $R0
    change_file:
      StrCpy $R0 "$usb$R0"
    home_exe:
      StrCpy $1 $R0 8
      StrCmp "$1" "EXEDIR:\" 0 end
      StrCpy $R0 $R0 "" 8
      StrCpy $R0 "$EXEDIR\$R0"
    end:
      Push $R0
      Exch
      Pop $R0
      Exch
      Pop $1
      Exch
      Pop $0
  FunctionEnd
  
  !macro ConvertToFile V F
    Push ${F}
    Call ConvertToFile
    Pop ${V}
  !macroend
  
  !define ConvertToFile `!insertmacro ConvertToFile`
  
  Function ConvertToAlias
    ;; $0= File
    ;; $1 = Temp
    ;; $2 = Temp
    ;; $3 = Temp
    ;; $R0 = File with backslashes.
    Push $0
    Exch
    Pop $0
    Push $1
    Push $2
    Push $3
    Push $R0
    ${StrSlash} "$0" "/"
    GetFullPathName $1 "$EXEDIR"
    StrLen $2 $1
    StrCpy $3 $R0 $2
    StrCmp $1 $3 replace_exedir
    GetFullPathName /SHORT $1 "$EXEDIR"
    StrLen $2 $1
    StrCpy $3 $R0 $2
    StrCmp $1 $3 replace_exedir
    Goto usb
    replace_exedir:
      StrCpy $R0 $R0 "" $2
      StrCpy $R0 "EXEDIR:$R0" 
    usb:
      Push $R0
      ${SetEnv}
      Pop $R0
      StrCpy $1 $R0 3
      StrCmp $1 $usb 0 end
      StrCpy $R0 $R0 "" 3
      StrCpy $R0 "USB:\$R0"
    end:
      
      Push $R0
      Exch
      Pop $R0
      Exch
      Pop $3
      Exch
      Pop $2
      Exch
      Pop $1
      Exch
      Pop $0 
  FunctionEnd
  
  !macro ConvertToAlias V F
    Push ${F}
    Call ConvertToAlias
    Pop ${V}
  !macroend
  
  !define ConvertToAlias `!insertmacro ConvertToAlias`
  
#+END_SRC
