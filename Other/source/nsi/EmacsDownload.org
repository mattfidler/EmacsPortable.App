#+TITLE: Emacs Download Script
#+AUTHOR: Matthew L. Fidler
#+PROPERTY: tangle EmacsDownload.nsi
* Installer Properties
** Setup Options
I want:
 - user level execution
 - CRC check
 - Good compression
#+BEGIN_SRC nsis
CRCCheck On
RequestExecutionLevel user
; Best Compression
SetCompress Auto
SetCompressor /SOLID lzma
SetCompressorDictSize 32
SetDatablockOptimize On
#+END_SRC

** User Interface
Modern UI2 user interface
#+BEGIN_SRC nsis
!include "MUI2.nsh"
#+END_SRC
** Defines
#+BEGIN_SRC nsis
!define mirror $EXEDIR\App\ini\mirrors.ini
#+END_SRC

** Headers and Plugins
#+BEGIN_SRC nsis
  !include "FileFunc.nsh"
  !include blowfish.nsh
  !include "emacsproxy.nsh"
  !include "EmacsDownloadShared.nsh"
#+END_SRC

** Output Executable
#+BEGIN_SRC nsis
OutFile "..\..\..\EmacsDownload.exe"
#+END_SRC

** Modern UI interface setup
#+BEGIN_SRC nsis
  Name "EmacsPortable.App Download Emacs"
  BrandingText "EmacsPortable.App"
  !define MUI_ICON "..\img\ico\preferences_system.ico"
  !define MUI_HEADERIMAGE
  
  !define MUI_HEADERIMAGE_BITMAP "..\img\headerimage.bmp" ; 150x57 pixels
  !define MUI_HEADERIMAGE_UNBITMAP "..\img\headerimage.bmp" ; 150x57 pixels
  
  !define MUI_WELCOMEFINISHPAGE_BITMAP "..\img\welcome.bmp" ;164x314 pixels
  !define MUI_UNWELCOMEFINISHPAGE_BITMAP "..\img\welcome.bmp" ;164x314 pixels
  
  !define MUI_ABORTWARNING
  !define MUI_UNABORTWARNING
  !define MUI_PAGE_HEADER_TEXT "EmacsPortable.app"
  !define MUI_PAGE_HEADER_SUBTEXT "Emacs on the Go"
  
  !define MUI_COMPONENTSPAGE_SMALLDESC
  !define MUI_HEADERIMAGE_RIGHT
  !insertmacro MUI_PAGE_COMPONENTS
  !insertmacro MUI_PAGE_INSTFILES
  !insertmacro MUI_PAGE_FINISH
  !insertmacro MUI_LANGUAGE "English"
#+END_SRC

** Global variables
#+BEGIN_SRC nsis
var PA
var PG
#+END_SRC

* Macros

* Installation Sections
** Use Git when available 
#+BEGIN_SRC nsis
Section /o "Use GIT instead of ZIP" sec_use_git_instead_of_zip ; Unchecked (/o)
  ; Description:
  ; Git Download of EmacsPortable.App
  
SectionEnd ; sec_use_git_instead_of_zip
#+END_SRC

** Download
#+BEGIN_SRC nsis
  SectionGroup  "Download and Add" sec_download_and_add ; Collapsed
    ; Description:
    ; Download and add these items to the curret EmacsPortable.App
    
#+END_SRC

*** Emacs Versions Sections
 This should be based on the mirror ini file and generated from emacs
 lisp and ported to a NSI install script.  It generates the chekbox
 toggle depending on what is installed.
 
 [[./EmacsDownload-vers.el]]

#+BEGIN_SRC nsis
!include "EmacsDownload-vers.nsi"
#+END_SRC

*** Emacs Compile Tools
#+BEGIN_SRC nsis
!include "emacsCompileTools.nsi"
#+END_SRC
*** Non-ELPA Packages
**** Fix Functions
#+BEGIN_SRC nsis
  Function FixNxhtml
    IfFileExists "$EXEDIR\App\lisp\src\nxhtml" 0 +2
    RmDir /r "$EXEDIR\App\lisp\src\nxhtml"
    Rename "$R9" "$EXEDIR\App\lisp\src\nxhtml"
    Push $0
  FunctionEnd
  
  Function FixEsn
    IfFileExists "$EXEDIR\App\lisp\src\esn" 0 +2
    RmDir /r "$EXEDIR\App\lisp\src\esn"
    Rename "$R9" "$EXEDIR\App\lisp\src\esn"
    Push $0
  FunctionEnd
  
  
  Function FixYasnippet
    IfFileExists "$EXEDIR\App\lisp\src\yasnippet" 0 +2
    RmDir /r "$EXEDIR\App\lisp\src\yasnippet"
    Rename "$R9" "$EXEDIR\App\lisp\src\yasnippet"
    IfFileExists "$EXEDIR\Data\snippets\text-mode" del_snippet move_snippet
    del_snippet:
      RmDir /r "$EXEDIR\App\lisp\src\yasnippet\snippets"
      Goto end
    move_snippet:
      RmDir /r "$EXEDIR\Data\snippets"
      Rename "$EXEDIR\App\lisp\src\yasnippet\snippets" "$EXEDIR\Data\snippets"
      Goto end
    end:
      #end
      Push $0
  FunctionEnd
#+END_SRC
**** Sections
#+BEGIN_SRC nsis
  SectionGroup "Emacs Packages" sec_emacs_packages 
    ; Description:
    ; Emacs Packages not included in ELPA or outdated in ELPA
    Section /o "Color Theme" sec_color_theme ; Unchecked (/o)
      ; Description:
      ; Color Theme Support
      ${DOWN} "color" "$EXEDIR\App\lisp\src"
    SectionEnd ; sec_color_theme
    Section /o "Emacs Speaks Statistics" sec_emacs_speaks_statistics ; Unchecked (/o)
      ; Description:
      ; Emacs Speaks Statistics
      ${DOWN} "ess" "$EXEDIR\App\lisp\src"
    SectionEnd ; sec_emacs_speaks_statist1ics
    Section /o "Emacs Speaks NONMEM" sec_emacs_speaks_nonmem ; Unchecked (/o)
      ; Description:
      ; NONMEM support
      ${DOWN} "esn" "$EXEDIR\App\lisp\src"
      ${Locate} "$EXEDIR\App\lisp\src" "/L=D /M=*-Emacs-Speaks-NONMEM-* /S= /G=0" "FixEsn"
    SectionEnd ; sec_emacs_speaks_nonmem
    Section /o "nxhtml" sec_nxhtml ; Unchecked (/o)
      ; Description:
      ; nxhtml mode and utilities
      ${DOWN} "nxhtml" "$EXEDIR\App\lisp\src"
      ${Locate} "$EXEDIR\App\lisp\src" "/L=D /M=*-nxhtml-* /S= /G=0" "FixNxhtml"
    SectionEnd ; sec_nxhtml
    Section /o "Org Mode" sec_org_mode ; Unchecked (/o)
      ; Description:
      ; Org Mode
      StrCmp $org_installed "1" skip_org
      ${DOWN} "org" "$EXEDIR\App\lisp\src"
      skip_org:
        ClearErrors
    SectionEnd ; sec_org_mode
    Section /o "Yasnippet" sec_yasnippet ; Unchecked (/o)
      ; Description:
      ; Yasnippet github version
      ${DOWN} "yas" "$EXEDIR\App\lisp\src"
      ${Locate} "$EXEDIR\App\lisp\src" "/L=D /M=*-yasnippet-* /S= /G=0" "FixYasnippet"
    SectionEnd ; sec_yasnippet
  SectionGroupEnd ; sec_emacs_packages
  ;--------------------------------
  ;Description(s)
  LangString DESC_sec_emacs_packages ${LANG_ENGLISH} "Emacs Packages not included in ELPA or outdated in ELPA"
  LangString DESC_sec_color_theme ${LANG_ENGLISH} "Color Theme Support"
  LangString DESC_sec_org_mode ${LANG_ENGLISH} "Org Mode"
  LangString DESC_sec_emacs_speaks_nonmem ${LANG_ENGLISH} "NONMEM support"
  LangString DESC_sec_nxhtml ${LANG_ENGLISH} "nxhtml mode and utilities"
  LangString DESC_sec_yasnippet ${LANG_ENGLISH} "Yasnippet github version"
  LangString DESC_sec_emacs_speaks_statistics ${LANG_ENGLISH} "Emacs Speaks Statistics"
  
  !define ELPA `!insertmacro ELPA`
  !macro ELPA
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_emacs_speaks_nonmem} $(DESC_sec_emacs_speaks_nonmem)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_nxhtml} $(DESC_sec_nxhtml)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_yasnippet} $(DESC_sec_yasnippet)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_emacs_speaks_statistics} $(DESC_sec_emacs_speaks_statistics)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_emacs_packages} $(DESC_sec_emacs_packages)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_org_mode} $(DESC_sec_org_mode)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_color_theme} $(DESC_sec_color_theme)
  !macroend
  
#+END_SRC
*** GnuWin32 Applications
#+BEGIN_SRC nsis
!include "emacsdownload-gw32.nsi"
#+END_SRC

*** Portable Apps that Emacs Recognizes
Using list, the portable apps that Emacs recognizes are generated from
the mirrors.ini file
[[file:./EmacsDownload-pae.el]]


#+BEGIN_SRC nsis
!include "EmacsDownload-pae.nsi"
#+END_SRC

*** End Download and Add Section
#+BEGIN_SRC nsis
  SectionGroupEnd ; sec_download_and_add
  LangString DESC_sec_download_and_add ${LANG_ENGLISH} "Download and add these items to the curret EmacsPortable.App"
#+END_SRC
** Remove
#+BEGIN_SRC nsis
  SectionGroup "Remove From EmacsPortable.App" sec_remove_from_emacsportable_app ; Collapsed
    ; Description:
    ; Remove Packages and Settings from EmacsPortable.App
#+END_SRC
*** Remove GnuWin32 Applications 
#+BEGIN_SRC nsis
!include "emacsdownload-rgw32.nsi"
#+END_SRC

*** End Remove Section
#+BEGIN_SRC nsis
  SectionGroupEnd ; sec_remove_from_emacsportable_app
  ;Description(s)
  LangString DESC_sec_remove_from_emacsportable_app ${LANG_ENGLISH} "Remove Packages and Settings from EmacsPortable.App"
#+END_SRC


** Tools
#+BEGIN_SRC nsis
  SectionGroup "Tools" sec_tools ; Collapsed
    ; Description:
    ; Tools for modifying EmacsPortable.App
    Section /o "Compile EmacsPortable.App launcher" sec_compile_emacs ; Unchecked (/o)
      ; Description:
      ; Compile EmacsPortable.App launcher
      Call CompileEmacsPortableApp
    SectionEnd ; sec_compile_emacs
  SectionGroupEnd ; sec_tools
  ;--------------------------------
  ;Description(s)
  LangString DESC_sec_tools ${LANG_ENGLISH} "Tools for modifying EmacsPortable.App"
  LangString DESC_sec_compile_emacs ${LANG_ENGLISH} "Compile EmacsPortable.App launcher"
#+END_SRC

** Hidden Start of EmacsDownload.exe
#+BEGIN_SRC nsis
  Section "" 
    StrCmp "$EXEFILE" "etmp.exe" 0 skip
    Exec "$EXEDIR\EmacsDownload.exe"
    skip:
      ClearErrors
  SectionEnd ; sec_
  
#+END_SRC

* Installer Functions
** Determine Portable Apps and GIT Location
#+BEGIN_SRC nsis
  Function GetDriveVars
    StrCmp $9 "c:\" git
    StrCmp $8 "HDD" gpa
    StrCmp $9 "a:\" spa
    StrCmp $9 "b:\" spa
    
    gpa:
      IfFileExists "$9PortableApps" 0 git
      StrCpy $PA "$9PortableApps"
    git:
      IfFileExists "$9cygwin\bin\git.exe" 0 +2
      StrCpy $PG "$9cygwin\bin\git.exe"
      IfFileExists "$9msysgit\msysgit\cmd\git.cmd" 0 +2
      StrCpy $PG "$9msysgit\msysgit\cmd\git.cmd"
      IfFileExists "$9msysgit\cmd\git.cmd" 0 +2
      StrCpy $PG "$9msysgit\cmd\git.cmd"
      IfFileExists "$9PortableGit\cmd\git.cmd" 0 +2
      StrCpy $PG "$9PortableGit\cmd\git.cmd"
      IfFileExists "$9PortableApps\PortableGit\cmd\git.cmd" 0 +2
      StrCpy $PG "$9PortableApps\PortableGit\cmd\git.cmd"
      IfFileExists "$9GitPortable\cmd\git.cmd" 0 +2
      StrCpy $PG "$9GitPortable\cmd\git.cmd"
      IfFileExists "$9PortableApps\GitPortable\cmd\git.cmd" 0 +2
      StrCpy $PG "$9PortableApps\GitPortable\cmd\git.cmd"
    spa:
      Push $0
      
  FunctionEnd
  
#+END_SRC
** Set Emacs Lisp Packages as installed
*** Color Theme
#+BEGIN_SRC nsis
Function SetCT_RO
  ${setInstall} ${sec_color_theme}
FunctionEnd
#+END_SRC

*** ESS
#+BEGIN_SRC nsis
Function SetESS_RO
  ${setInstall} ${sec_emacs_speaks_statistics}
FunctionEnd
#+END_SRC
*** Org-Mode
#+BEGIN_SRC nsis
  Function SetORG_RO 
    IfFileExists "$R9\lisp\org.el" 0 org_ro
    ${setInstall} ${sec_org_mode}
    ${setInstall} ${sec_ct1}
    org_ro:
      ClearErrors
  FunctionEnd
  
#+END_SRC
** Initialization
#+BEGIN_SRC nsis
  Function .onInit
    StrCmp "$EXEFILE" "etmp.exe" emacs_temp emacs_download
    emacs_download:
      IfFileExists "$EXEDIR\etmp.exe" 0 emacs_etmp
    wait_for_etmp_exit:
      FindProcDLL::FindProc "etmp.exe"
      StrCmp $R0 "1" 0 +3
      Sleep 1
      Goto wait_for_etmp_exit
      Delete "$EXEDIR\etmp.exe"
      Abort
    emacs_etmp:
      
      CopyFiles /SILENT "$EXEDIR\$EXEFILE" "$EXEDIR\etmp.exe"
      Exec "$EXEDIR\etmp.exe"
      Abort
    emacs_temp:    
      StrCpy $INSTDIR $EXEDIR
      StrCpy $PA ""
      StrCpy $PROXY_ID ""
      ${GetDrives} "FDD+HDD" "GetDriveVars"
      StrCmp "$PG" "" cant_use_git can_use_git
    cant_use_git:
      SectionSetFlags ${sec_use_git_instead_of_zip} ${SF_RO}
      Goto after_git
    can_use_git:
      SectionSetFlags ${sec_use_git_instead_of_zip} ${SF_SELECTED}
      Goto after_git
    after_git:
      ${INI_VERS}
      ${Locate} "$EXEDIR\App\lisp\src" "/L=D /M=org* /S= /G=0" "SetORG_RO"
      ${Locate} "$EXEDIR\App\lisp\src" "/L=D /M=color-theme-* /S= /G=0" "SetCT_RO"
      ${Locate} "$EXEDIR\App\lisp\src" "/L=D /M=ess-* /S= /G=0" "SetESS_RO"
      
      ${setInstallIfExists} "$EXEDIR\App\lisp\src\esn" ${sec_emacs_speaks_nonmem}
      ${setInstallIfExists} "$EXEDIR\App\lisp\src\nxhtml" ${sec_nxhtml}
      ${setInstallIfExists} "$EXEDIR\App\lisp\src\yasnippet" ${sec_yasnippet}
      !insertmacro REQ_INI
      ${PA_INI}
      ${G32_INI}
      ${RG32_INI}
      ${ifSecNotRO} ${sec_color_theme}           skip_emacs_packages 
      ${ifSecNotRO} ${sec_emacs_speaks_statistics} skip_emacs_packages 
      ${ifSecNotRO} ${sec_emacs_speaks_nonmem}   skip_emacs_packages 
      ${ifSecNotRO} ${sec_nxhtml}                skip_emacs_packages 
      ${ifSecNotRO} ${sec_org_mode}              skip_emacs_packages 
      ${ifSecNotRO} ${sec_yasnippet}             skip_emacs_packages 
      ${setInstallGroup} ${sec_emacs_packages}
    skip_emacs_packages:
    FunctionEnd
  
#+END_SRC
** Termination
Remove all plug-in directory files, like 7zip.
#+BEGIN_SRC nsis
  Function .onGUIEnd
  FunctionEnd
  
#+END_SRC

** On Selection Change
#+BEGIN_SRC nsis
  Function .onSelChange
    ${VER_SEL}
  FunctionEnd  
#+END_SRC

* Descriptions
** Languages
#+BEGIN_SRC nsis
  !insertmacro MUI_FUNCTION_DESCRIPTION_BEGIN
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_compile_emacs} $(DESC_sec_compile_emacs)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_tools} $(DESC_sec_tools)
    
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_remove_from_emacsportable_app} $(DESC_sec_remove_from_emacsportable_app)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_download_and_add} $(DESC_sec_download_and_add)
    ${EMACS_DESC}
    ${NSIS_DESC}
    ${ELPA}
    ${PA_DESC}
    ${GW32_DESC}
    ${GW32E_DESC}
    ${RGW32_DESC}
    ${RGW32E_DESC}
  !insertmacro MUI_FUNCTION_DESCRIPTION_END 
#+END_SRC
