#+TITLE: Call Emacs for Batch Processing
#+AUTHOR: Matthew L. Fidler
#+PROPERTY: tangle emacsCall.nsh
* Introduction
Allows NSIS to call emacs for batch processing.
* Adding to Path
#+BEGIN_SRC nsis

  !ifndef pifex
    !macro __pifex ARG1
      DetailPrint "Checking for ${ARG1}"
      StrCpy $9 ""
      IfFileExists "${ARG1}" 0 +4
      System::Call 'Kernel32::GetEnvironmentVariable(t , t, i) i("PATH", .r0, ${NSIS_MAX_STRLEN}).r1'
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("PATH", "${ARG1};$0").r3'StrCpy $9 "1"
    !macroend
    !define pifex '!insertmacro "__pifex"'
  !endif
  
#+END_SRC
* Find 7zip
#+BEGIN_SRC nsis
  var exe_7z
  Function Find7z
    Push $R0
    Push $R6
    Push $R8
    Push $R9
    StrCpy "$R6" "$EXEDIR"
    ${If} $usbs == ""
      StrCpy $usbs $EXEDIR 2
    ${EndIf}
    DetailPrint "Looking for locally installed 7-Zip."
    ReadRegStr $R0 HKLM "SOFTWARE\7-Zip" "Path"
    ClearErrors
    IfFileExists "$R0\7zG.exe" 0 +3
    GetFullPathName /SHORT $R0  "$R0\7zG.exe"
    Goto found_7z
  
    DetailPrint "Looking For 7zG at $R6\..\7-ZipPortable\App\7-zip\7zG.exe"
    IfFileExists "$R6\..\7-ZipPortable\App\7-zip\7zG.exe" 0 +3
    GetFullPathName /SHORT $R0  "$R6\..\7-ZipPortable\App\7-zip\7zG.exe"
    Goto found_7z
  
    DetailPrint "Looking For 7zG at $R6\..\..\7-ZipPortable\App\7-zip\7zG.exe"
    IfFileExists "$R6\..\..\7-ZipPortable\App\7-zip\7zG.exe" 0 +3
    GetFullPathName /SHORT $R0  "$R6\..\..\7-ZipPortable\App\7-zip\7zG.exe"
    Goto found_7z
  
    EnumINI::Section "$EXEDIR\App\ini\paths.ini" "portable.dirs"
    Pop $R8
    DetailPrint "Looking For 7zG portable.dirs, $EXEDIR, $R8"
    StrCmp $R8 "error" not_found
    loop_7z:
      IntCmp $R8 "0" not_found not_found 0 
      Pop $R9
      DetailPrint "Looking For 7zG at $usbs\$R9\7-ZipPortable\App\7-zip\7zG.exe"
      IfFileExists "$usbs\$R9\7-ZipPortable\App\7-zip\7zG.exe" 0 +3
      GetFullPathName /SHORT $R0  "$usbs\$R9\7-ZipPortable\App\7-zip\7zG.exe"
      Goto finalize
      DetailPrint "Looking For 7zG at $usbs\$R9\7Zip\App\7-Zip\x86\7zG.exe"
      IfFileExists "$usbs\$R9\7Zip\App\7-Zip\x86\7zG.exe" 0 +3
      GetFullPathName /SHORT $R0  "$usbs\$R9\7Zip\App\7-Zip\x86\7zG.exe"
      Goto finalize
      IntOp $R8 $R8 - 1
      Goto loop_7z
    finalize:
      IntOp $R8 $R8 - 1
    finalize_loop:
      IntCmp $R8 "0" found_7z found_7z 0 
      Pop $R9
      IntOp $R8 $R8 - 1
      Goto finalize_loop
    found_7z:
      StrCpy $exe_7z $R0
    already_found:
      Pop $R9
      Pop $R8
      Pop $R6
      Pop $R0
      Push $exe_7z
      Goto end
    not_found:
      Pop $R9
      Pop $R8
      Pop $R6
      Pop $R0
      Push ""
    end:
      ClearErrors
  FunctionEnd
#+END_SRC
* Extract Zip-file of emacs
#+BEGIN_SRC nsis
  Var extract_emacs_handle
  Var extract_emacs_async
  Function ExtractZip
    Push $R0
    IfFileExists "$TEMP\ep\emacs-$option_version\bin" end
    IfFileExists "$INSTDIR\App\emacs-$option_version\bare-bin.zip" 0 end
    IfFileExists "$INSTDIR\App\emacs-$option_version\ext-bin.zip" 0 end
    Goto no_7z
    Call Find7z
    Pop $R0
    StrCmp $R0 "" no_7z found_7z
    found_7z:
      StrCpy "$extract_emacs_async" "1"
      ZipDLL::extractall "$INSTDIR\App\emacs-$option_version\bare-bin.zip" "$TEMP\ep"
      ExecDos::exec /ASYNC /DETAILED "$R0 x $\"$INSTDIR\App\emacs-$option_version\ext-bin.zip$\" -o$TEMP\ep"
      Pop $extract_emacs_handle 
    no_7z:
      SetOutPath "$TEMP\ep"
      ZipDLL::extractall "$INSTDIR\App\emacs-$option_version\bare-bin.zip" "$TEMP\ep"
      ZipDLL::extractall "$INSTDIR\App\emacs-$option_version\ext-bin.zip" "$TEMP\ep"
    end:
      ClearErrors
      Push $R0
  FunctionEnd
  
#+END_SRC

* Finding Emacs
#+BEGIN_SRC nsis
  Var found_emacs
  Var called_emacs
  Var extracted_emacs
  Function AddEmacsPath
    StrCpy "$called_emacs" "1"
    ${pifex} "$INSTDIR\App\gw32\bin"
    ${pifex} "$PA\AutoHotKeyPortable\App\AutoHotkey\Compiler"
    ${pifex} "$PA\NSISPortableANSI\App\NSIS"
    
    StrCpy $R1 ""
    ${Locate} "$INSTDIR\App" "/L=D /M=emacs-* /S= /G=0" "SetEmacs"
    StrCpy $found_emacs $R1
    StrCmp $found_emacs "" 0 +3
    MessageBox MB_OK "Could not Locate Emacs."
    Goto end
    StrCmp $R2 "zip" use_zip use_bin
    use_zip:
      StrLen $R3 "$INSTDIR\App\emacs-"
      StrLen $R2 "$R1"
      IntOp $R3 $R3 - $R2
      StrCpy $R3 $R1 "" $R3
      StrCpy $R3 $R3 -8
      IfFileExists "$TEMP\ep\emacs-$R3\bin\emacs.exe" unzipped
      Call ExtractZip
      IfFileExists "$TEMP\ep\emacs-$R3\etc\DOC-X" +3 0
      Sleep 500
      Goto -2
      IfFileExists "$TEMP\ep\emacs-$R3\bin\emacs.exe" +3 0
      Sleep 500
      Goto -2
      SetOutPath "$TEMP\ep"
      ZipDLL::extractall "$R1" "$TEMP\ep"
      StrCpy $extracted_emacs "1"
    unzipped:
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("EMACSDATA", "$INSTDIR\App\emacs-$R3\etc").r0'
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("EMACSDOC", "$INSTDIR\App\emacs-$R3\etc").r0'
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("EMACSLOADPATH", "$INSTDIR\App\emacs-$R3\lisp").r0'
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("INFOPATH", "$INSTDIR\App\emacs-$R3\info").r0'
      StrCpy  $found_emacs "$TEMP\ep\emacs-$R3\bin"
      Goto use_bin
    use_bin:
      ${pifex} "$found_emacs"
    end:
      ClearErrors
  FunctionEnd
  Function SetEmacs
    IfFileExists "$R9\bin" 0 find_zip
    StrCpy $R1 "$R9\bin"
    StrCpy $R2 ""
    Goto end
    find_zip:
      IfFileExists "$R9\bin.zip" 0 end
      StrCpy $R1 "$R9\bin.zip"
      StrCpy $R2 "zip"
    end:
      StrCpy $0 1
      Push $0
  FunctionEnd
  Function CleanEmacsZip
    StrCmp $extracted_emacs "1" 0 end
    RmDir /r $TEMP\ep
    StrCpy $called_emacs ""
    end:
      ClearErrors
  FunctionEnd
  
#+END_SRC
