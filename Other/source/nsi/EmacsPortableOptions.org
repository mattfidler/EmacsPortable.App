#+TITLE: EmacsPortable Startup Options 
#+AUTHOR: Matthew L. Fidler
#+PROPERTY: tangle EmacsPortableOptions.nsi
* Introduction
This provides an interface to the Emacs Startup options
* Header
** Compression and other options
#+BEGIN_SRC nsis
  CRCCheck On
  RequestExecutionLevel user
  ; Best Compression
  SetCompress Auto
  SetCompressor /SOLID lzma
  SetCompressorDictSize 32
  SetDatablockOptimize On
#+END_SRC
** Definitions and Variables
#+BEGIN_SRC nsis
  !define TEMP1 $R0 ;Temp variable
  Var cpdir
  Var EPEXE 
  Var download_emacs_version
  Var download_mac
  Var download_font
  Var download_startup
  Var download_use 
  Var download_dict
#+END_SRC
** Include files
#+BEGIN_SRC nsis
  !include "MUI2.nsh"
  !include "EmacsDownloadShared.nsh"
  !include "LogicLib.nsh"
  !include "FileFunc.nsh"
  !include "StrRep.nsh"
  !include "emacsproxy.nsh"
  !include "setupEmacsData.nsh"
  !include "CommCtrl.nsh"
  !include "RepInFile.nsh"
  !include "emacsEnv.nsh"
  !include "EmacsCall.nsh"
  
#+END_SRC
** nsDialogs Hacks
*** Sorted DropList
See
http://nsis.sourceforge.net/NsDialogs_FAQ#How_to_create_a_sorted_droplist_control
#+BEGIN_SRC nsis
  /*
  nsDialogs_createDroplistSorted.nsh
  Header file for creating a sorted droplist control.
   
  Usage:
    ${NSD_CreateDroplistSorted} left top width height ""
    Creates the sorted droplist at the location specified.
  ,*/
  
  !ifndef NSDIALOGS_createDroplistSorted_INCLUDED
    !define NSDIALOGS_createDroplistSorted_INCLUDED
    !verbose push
    !verbose 3
    
    !include WinMessages.nsh
    
    !define __NSD_DropListSorted_CLASS COMBOBOX
    !define __NSD_DropListSorted_STYLE ${DEFAULT_STYLES}|${WS_TABSTOP}|${WS_VSCROLL}|${WS_CLIPCHILDREN}|${CBS_AUTOHSCROLL}|${CBS_HASSTRINGS}|${CBS_DROPDOWNLIST}|${CBS_SORT}
    !define __NSD_DropListSorted_EXSTYLE ${WS_EX_WINDOWEDGE}|${WS_EX_CLIENTEDGE}
    
    !insertmacro __NSD_DefineControl DropListSorted
    
    !verbose pop
  !endif
#+END_SRC
*** Sorted ComboBox 
#+BEGIN_SRC nsis
  !ifndef NSDIALOGS_createComboBoxSorted_INCLUDED
    !define NSDIALOGS_createComboBoxSorted_INCLUDED
    !verbose push
    !verbose 3
    
    !include WinMessages.nsh
    !define __NSD_ComboBoxSorted_CLASS COMBOBOX
    !define __NSD_ComboBoxSorted_STYLE ${DEFAULT_STYLES}|${WS_TABSTOP}|${WS_VSCROLL}|${WS_CLIPCHILDREN}|${CBS_AUTOHSCROLL}|${CBS_HASSTRINGS}|${CBS_DROPDOWN}|${CBS_SORT}
    !define __NSD_ComboBoxSorted_EXSTYLE ${WS_EX_WINDOWEDGE}|${WS_EX_CLIENTEDGE}
    !insertmacro __NSD_DefineControl ComboBoxSorted
    !verbose pop
  !endif
  
#+END_SRC

*** Sorted Listview
#+BEGIN_SRC nsis
  !ifndef NSDIALOGS_createListViewSorted_INCLUDED
    !define NSDIALOGS_createListViewSorted_INCLUDED
    !verbose push
    !verbose 3
    
    !include WinMessages.nsh
    !define __NSD_ListViewSorted_CLASS SysListView32
    !define __NSD_ListViewSorted_STYLE ${DEFAULT_STYLES}|${LVS_REPORT}|${LVS_SINGLESEL}|${LVS_SHAREIMAGELISTS}|${LVS_SORTASCENDING}|${LVS_NOSORTHEADER}
    !define __NSD_ListViewSorted_EXSTYLE ${WS_EX_WINDOWEDGE}|${WS_EX_CLIENTEDGE}
  
    !insertmacro __NSD_DefineControl ListViewSorted
  
    !verbose pop
  !endif
#+END_SRC


*** Sorted ListBoxMultiselect

!define __NSD_ListBoxMultiSelectSort_CLASS LISTBOX
!define __NSD_ListBoxMultiSelectSort_STYLE ${DEFAULT_STYLES}|${WS_TABSTOP}|${WS_VSCROLL}|${LBS_DISABLENOSCROLL}|${LBS_HASSTRINGS}|${LBS_NOINTEGRALHEIGHT}|${LBS_NOTIFY}|${LBS_MULTIPLESEL}|${LVS_SORTASCENDING}
!define __NSD_ListBoxMultiSelectSort_EXSTYLE ${WS_EX_WINDOWEDGE}|${WS_EX_CLIENTEDGE}
!insertmacro __NSD_DefineControl ListBoxMultiSelectSort
#+BEGIN_SRC nsis
  !define __NSD_ListBoxMultiSelectSort_CLASS LISTBOX
  !define __NSD_ListBoxMultiSelectSort_STYLE ${DEFAULT_STYLES}|${WS_TABSTOP}|${WS_VSCROLL}|${LBS_DISABLENOSCROLL}|${LBS_HASSTRINGS}|${LBS_NOINTEGRALHEIGHT}|${LBS_NOTIFY}|${LBS_MULTIPLESEL}|${LBS_SORT}
  !define __NSD_ListBoxMultiSelectSort_EXSTYLE ${WS_EX_WINDOWEDGE}|${WS_EX_CLIENTEDGE}
  !insertmacro __NSD_DefineControl ListBoxMultiSelectSort
#+END_SRC



** Name,Branding and Output file
#+BEGIN_SRC nsis
  Name "EmacsPortable.App Options"
  OutFile "..\..\..\EmacsOptions.exe"
  BrandingText "PortableEmacs.App"
  
  InstallDir "$EXEDIR"
#+END_SRC
** Modern User Interface Options
#+BEGIN_SRC nsis
  !define MUI_ICON "..\img\ico\preferences_system.ico"
  #!define MUI_UNICON
  !define MUI_HEADERIMAGE
  
  !define MUI_HEADERIMAGE_BITMAP "..\img\headerimage-options.bmp" ; 150x57 pixels
  !define MUI_HEADERIMAGE_UNBITMAP "..\img\headerimage-options.bmp" ; 150x57 pixels
  
  !define MUI_WELCOMEFINISHPAGE_BITMAP "..\img\welcome-options.bmp" ;164x314 pixels
  !define MUI_UNWELCOMEFINISHPAGE_BITMAP "..\img\welcome-options.bmp" ;164x314 pixels
  
  !define MUI_ABORTWARNING
  !define MUI_UNABORTWARNING
  !define MUI_PAGE_HEADER_TEXT "EmacsPortable.app"
  !define MUI_PAGE_HEADER_SUBTEXT "Emacs on the Go"
  
  !define MUI_COMPONENTSPAGE_SMALLDESC
  !define MUI_HEADERIMAGE_RIGHT
#+END_SRC

** NSIS Pages
#+BEGIN_SRC nsis
  ;Order of pages
  !define MUI_PAGE_CUSTOMFUNCTION_PRE licPre
  !insertmacro MUI_PAGE_LICENSE "..\gpl-3.0.rtf"
  !define MUI_PAGE_CUSTOMFUNCTION_PRE dirPre
  !define MUI_DIRECTORYPAGE_VARIABLE $cpdir
  !define MUI_DIRECTORYPAGE_VERIFYONLEAVE
  !insertmacro MUI_PAGE_DIRECTORY
  Page custom fnc_startup_options_Show fnc_startup_options_Validate
  Page custom fnc_download_Show fnc_download_Validate
  Page custom fnc_assocs_Show fnc_assocs_Validate
  Page custom fnc_proxy_Show fnc_proxy_Validate
  Page custom fnc_behavior_Show fnc_behavior_Validate
  Page custom fnc_visuals_Show fnc_visuals_Validate
  !insertmacro MUI_PAGE_INSTFILES
  ##!insertmacro MUI_PAGE_FINISH
  !insertmacro MUI_LANGUAGE "English"
  
#+END_SRC
** Abort Built-in license file
Don't display the license page when 
#+BEGIN_SRC nsis
  Function licPre
    ## Is there only one file in the directory, if so show the licence page.
    ${If} ${FileExists} "$EXEDIR\App\site-lisp\site-start.el"
      Abort ; Licence page should not be shown.
    ${Else}
      ${GetParameters} $0
      ${GetOptions} $0 '/install' $R0
      IfErrors 0 +3
      ClearErrors
      Goto +2
      Abort
      ## Figure oup cpdir.
      StrCpy $cpdir "c:\EmacsPortable.App"
      ${GetDrives} "FDD+HDD" "GetInstDir"
    ${EndIf}
  FunctionEnd
  
  Function GetInstDir
    StrCmp $9 "c:\" gpa
    StrCmp $8 "HDD" gpa
    StrCmp $9 "a:\" spa
    StrCmp $9 "b:\" spa
    gpa:
      ${If} ${FileExists} "$9\PortableApps"
        StrCpy $cpdir "$9\PortableApps\EmacsPortable.App"
      ${ElseIf} ${FileExists} "$9\Apps"
        StrCpy $cpdir "$9\Apps\EmacsPortable.App"
      ${ElseIf} ${FileExists} "$9\LiberKey\MyApps"
        StrCpy $cpdir "$9\LiberKey\MyApps\EmacsPortable.App"
      ${EndIf}
    spa:
      
  FunctionEnd
  
#+END_SRC
** Abort build-in directory page
#+BEGIN_SRC nsis
  Function dirPre
    ## Is there only one file in the directory, if so show the licence page.
    ${If} ${FileExists} "$EXEDIR\App\site-lisp\site-start.el"
      Abort ; Dir page should not be shown.
    ${Else}
      ${GetParameters} $0
      ${GetOptions} $0 '/install' $R0
      IfErrors 0 +3
      ClearErrors
      Goto +2
      Abort
    ${EndIf}
  FunctionEnd
#+END_SRC

* Macros
** Read/Write Macros
#+BEGIN_SRC nsis  
  !macro SetCheck VARIABLE OPT 
    ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "${OPT}"
    ${If} $R0 == "1"
      ${NSD_Check} ${VARIABLE}
    ${ElseIf} ${Errors}
      ${NSD_Check} ${VARIABLE}
    ${Else}
      ${NSD_UnCheck} ${VARIABLE}
    ${EndIf}
    ClearErrors
  !macroend
  !define SetCheck `!insertmacro SetCheck`
  
  !macro SetUnCheck VARIABLE OPT 
    ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "${OPT}" 
    ${If} $R0 == "1"
      ${NSD_Check} ${VARIABLE}
    ${ElseIf} ${Errors}
      ${NSD_UnCheck} ${VARIABLE}
    ${Else}
      ${NSD_UnCheck} ${VARIABLE}
    ${EndIf}
    ClearErrors
  !macroend
  !define SetUnCheck `!insertmacro SetUnCheck`
  
  !macro SetUnRadio  VARIABLE OPT
    
  !macroend
  !define SetUnRadio `!insertmacro SetUnRadio`
  !macro SetDir VARIABLE OPT ERR
    ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "${OPT}"
    ${If} ${Errors}
      StrCpy $R0 "${ERR}"
    ${EndIf}
    ${NSD_SetText} ${VARIABLE} $R0
    
  !macroend
  !define SetDir `!insertmacro SetDir`
  !define SetText `!insertmacro SetDir`
  
  !macro WriteCheck VARIABLE OPT
    ${NSD_GetState} ${VARIABLE} $R0
    ${If} $R0 == ${BST_CHECKED}
      WriteIniStr "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" \
          "${OPT}" "1"
    ${Else}
      WriteIniStr "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" \
          "${OPT}" "0"
    ${EndIf}  
  !macroend
  !define WriteCheck `!insertmacro WriteCheck`
  
  !macro WriteText VARIABLE OPT
    ${NSD_GetText} ${VARIABLE} $R0
    ${If} $R0 != "(Select)"
      WriteIniStr "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" \
          "${OPT}" "$R0"
    ${EndIf}
  !macroEnd
  !define WriteText `!insertmacro WriteText`
  
  !macro WriteCB VARIABLE OPT
    ${NSD_CB_GetSelection} ${VARIABLE} $R0
    ${If} $R0 != "(Select)"
      WriteIniStr "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" \
          "${OPT}" "$R0"
    ${EndIf}
  !macroend
  !define WriteCB `!insertmacro WriteCB`
  
  !macro ReadProxy VARIABLE OPT
    ReadINIStr $R0 "$EXEDIR\Data\ini\proxy-$PROXY_IDE.ini" "$PROXY_NAME" "${OPT}"
    blowfish::decrypt $R0 "$PROXY_ID"
    Pop $R0
    Pop $R0
    ${NSD_SetText} ${VARIABLE} $R0
  !macroend
  !define ReadProxy `!insertmacro ReadProxy`
  
  !macro WriteProxy VARIABLE OPT
    ${NSD_GetText} ${VARIABLE} $R0
    blowfish::encrypt $R0 "$PROXY_ID"
    Pop $R0
    Pop $R0
    WriteINIStr "$EXEDIR\Data\ini\proxy-$PROXY_IDE.ini" "$PROXY_NAME" "${OPT}" "$R0"
  !macroend
  !define WriteProxy `!insertmacro WriteProxy`
  
  
#+END_SRC
** Explode
From http://nsis.sourceforge.net/Explode
#+BEGIN_SRC nsis
  !define Explode "!insertmacro Explode"
   
  !macro  Explode Length  Separator   String
      Push    `${Separator}`
      Push    `${String}`
      Call    Explode
      Pop     `${Length}`
  !macroend
  
  !define unExplode "!insertmacro unExplode"
   
  !macro  unExplode Length  Separator   String
      Push    `${Separator}`
      Push    `${String}`
      Call    un.Explode
      Pop     `${Length}`
  !macroend
   
  Function Explode
    ; Initialize variables
    Var /GLOBAL explString
    Var /GLOBAL explSeparator
    Var /GLOBAL explStrLen
    Var /GLOBAL explSepLen
    Var /GLOBAL explOffset
    Var /GLOBAL explTmp
    Var /GLOBAL explTmp2
    Var /GLOBAL explTmp3
    Var /GLOBAL explArrCount
   
    ; Get input from user
    Pop $explString
    Pop $explSeparator
   
    ; Calculates initial values
    StrLen $explStrLen $explString
    StrLen $explSepLen $explSeparator
    StrCpy $explArrCount 1
   
    ${If}   $explStrLen <= 1          ;   If we got a single character
    ${OrIf} $explSepLen > $explStrLen ;   or separator is larger than the string,
      Push    $explString             ;   then we return initial string with no change
      Push    1                       ;   and set array's length to 1
      Return
    ${EndIf}
   
    ; Set offset to the last symbol of the string
    StrCpy $explOffset $explStrLen
    IntOp  $explOffset $explOffset - 1
   
    ; Clear temp string to exclude the possibility of appearance of occasional data
    StrCpy $explTmp   ""
    StrCpy $explTmp2  ""
    StrCpy $explTmp3  ""
   
    ; Loop until the offset becomes negative
    ${Do}
      ;   If offset becomes negative, it is time to leave the function
      ${IfThen} $explOffset == -1 ${|} ${ExitDo} ${|}
      
      ;   Remove everything before and after the searched part ("TempStr")
      StrCpy $explTmp $explString $explSepLen $explOffset
      
      ${If} $explTmp == $explSeparator
          ;   Calculating offset to start copy from
          IntOp   $explTmp2 $explOffset + $explSepLen ;   Offset equals to the current offset plus length of separator
          StrCpy  $explTmp3 $explString "" $explTmp2
          
          Push    $explTmp3                           ;   Throwing array item to the stack
          IntOp   $explArrCount $explArrCount + 1     ;   Increasing array's counter
          
          StrCpy  $explString $explString $explOffset 0   ;   Cutting all characters beginning with the separator entry
          StrLen  $explStrLen $explString
      ${EndIf}
   
      ${If} $explOffset = 0                       ;   If the beginning of the line met and there is no separator,
                                                  ;   copying the rest of the string
          ${If} $explSeparator == ""              ;   Fix for the empty separator
              IntOp   $explArrCount   $explArrCount - 1
          ${Else}
              Push    $explString
          ${EndIf}
      ${EndIf}
   
      IntOp   $explOffset $explOffset - 1
    ${Loop}
   
    Push $explArrCount
  FunctionEnd
  Function un.Explode
    ; Initialize variables
    ; Get input from user
    Pop $explString
    Pop $explSeparator
   
    ; Calculates initial values
    StrLen $explStrLen $explString
    StrLen $explSepLen $explSeparator
    StrCpy $explArrCount 1
   
    ${If}   $explStrLen <= 1          ;   If we got a single character
    ${OrIf} $explSepLen > $explStrLen ;   or separator is larger than the string,
      Push    $explString             ;   then we return initial string with no change
      Push    1                       ;   and set array's length to 1
      Return
    ${EndIf}
   
    ; Set offset to the last symbol of the string
    StrCpy $explOffset $explStrLen
    IntOp  $explOffset $explOffset - 1
   
    ; Clear temp string to exclude the possibility of appearance of occasional data
    StrCpy $explTmp   ""
    StrCpy $explTmp2  ""
    StrCpy $explTmp3  ""
   
    ; Loop until the offset becomes negative
    ${Do}
      ;   If offset becomes negative, it is time to leave the function
      ${IfThen} $explOffset == -1 ${|} ${ExitDo} ${|}
   
      ;   Remove everything before and after the searched part ("TempStr")
      StrCpy $explTmp $explString $explSepLen $explOffset
   
      ${If} $explTmp == $explSeparator
          ;   Calculating offset to start copy from
          IntOp   $explTmp2 $explOffset + $explSepLen ;   Offset equals to the current offset plus length of separator
          StrCpy  $explTmp3 $explString "" $explTmp2
   
          Push    $explTmp3                           ;   Throwing array item to the stack
          IntOp   $explArrCount $explArrCount + 1     ;   Increasing array's counter
   
          StrCpy  $explString $explString $explOffset 0   ;   Cutting all characters beginning with the separator entry
          StrLen  $explStrLen $explString
      ${EndIf}
   
      ${If} $explOffset = 0                       ;   If the beginning of the line met and there is no separator,
                                                  ;   copying the rest of the string
          ${If} $explSeparator == ""              ;   Fix for the empty separator
              IntOp   $explArrCount   $explArrCount - 1
          ${Else}
              Push    $explString
          ${EndIf}
      ${EndIf}
   
      IntOp   $explOffset $explOffset - 1
    ${Loop}
   
    Push $explArrCount
  FunctionEnd
#+END_SRC
* Functions
** Callback Functions
*** Initialization Function
#+BEGIN_SRC nsis
  Function .onInit
    ${GetParameters} $0
    ${GetOptions} $0 '/7z' $R0
    IfErrors next 0
    ${IfNot} ${FileExists} "$EXEDIR\App\7z\7zG.exe"
      SetOutPath "$EXEDIR\App\7z"
      File "..\..\..\App\7z\7zG.exe"
      File "..\..\..\App\7z\7z.*"
      File "..\..\..\App\7z\License.txt"
    ${EndIf}
    Abort
    next:
      StrCpy $EPEXE $EXEDIR
      StrCpy $INSTDIR $EXEDIR
      ClearErrors
  FunctionEnd  
  
#+END_SRC
*** Exit Function
#+BEGIN_SRC nsis
  Function .onGUIEnd
    ClearErrors
  FunctionEnd
  
#+END_SRC
* Pages
** Select Options to Customize
*** Dialog
#+BEGIN_SRC nsis
  ; handle variables
  Var hCtl_startup_options
  Var hCtl_startup_options_OptsGrp
  Var hCtl_startup_options_Select
  Var option_startup
  Var option_assoc
  Var option_proxy
  Var option_behavior
  Var option_visual
  Var option_download
  Var option_build
  
  
  ; dialog create function
  Function fnc_startup_options_Create
    
    ; === startup_options (type: Dialog) ===
    nsDialogs::Create 1018
    Pop $hCtl_startup_options
    ${If} $hCtl_startup_options == error
      Abort
    ${EndIf}
    !insertmacro MUI_HEADER_TEXT "Select Options" "Options to Customize"
    
    ; === OptsGrp (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 7u 280u 115u "Options to Customize"
    Pop $hCtl_startup_options_OptsGrp
    
    ; === Select (type: ListBox) ===
    ${NSD_CreateListView} 12u 17u 272u 97u ""
    Pop $hCtl_startup_options_Select
    SetCtlColors $hCtl_startup_options_Select 0x000000 0xFFFFFF
    ${NSD_LV_InsertColumn} $hCtl_startup_options_Select 0 300 "Option To Customize"
    ${NSD_LV_InsertItem} $hCtl_startup_options_Select 0 "Association Settings"
    ${NSD_LV_InsertItem} $hCtl_startup_options_Select 1 "Proxy Settings"
    ${NSD_LV_InsertItem} $hCtl_startup_options_Select 2 "Behavior; Startup Options, Integration Options, etc."
    ${NSD_LV_InsertItem} $hCtl_startup_options_Select 3 "Visual Options"
    ${NSD_LV_InsertItem} $hCtl_startup_options_Select 4 "Download Components"
    ${If} $option_startup == "1"
      ${NSD_LV_SetCheckState} $hCtl_startup_options_Select 0 "$option_assoc"
      ${NSD_LV_SetCheckState} $hCtl_startup_options_Select 1 "$option_proxy"
      ${NSD_LV_SetCheckState} $hCtl_startup_options_Select 2 "$option_behavior"
      ${NSD_LV_SetCheckState} $hCtl_startup_options_Select 3 "$option_visual"
      ${NSD_LV_SetCheckState} $hCtl_startup_options_Select 4 "$option_download"
    ${EndIf}
    !define /math _LISTVIEW_TEMP_STYLE ${LVS_EX_CHECKBOXES} | ${LVS_EX_FULLROWSELECT}
    SendMessage $hCtl_startup_options_Select ${LVM_SETEXTENDEDLISTVIEWSTYLE} 0 ${_LISTVIEW_TEMP_STYLE}
    !undef _LISTVIEW_TEMP_STYLE
  FunctionEnd
  
  
  ; dialog show function
  Function fnc_startup_options_Show
    StrCpy $option_download ""
    StrCpy $option_build ""
    ${If} $EXEFILE == "EmacsBuild.exe"
      StrCpy $option_build "1"
    ${Else}
      ${If} ${FileExists} "$EXEDIR\App\ini\mirrors.ini"
        StrCpy $2 ""
        FindFirst $0 $1 $EXEDIR\App\emacs-*.*
        loop_emacs:
          StrCmp $1 "" done_emacs
          StrCpy $2 "1"
          FindNext $0 $1
          Goto loop_emacs
        done_emacs:
          ${If} $2 == "1"
            ## Now see if EmacsPortableApp.exe exists
            ${If} ${FileExists} "$EXEDIR\EmacsPortableApp.exe"
              ${GetParameters} $0
              ${GetOptions} $0 '/all' $R0
              ${If} ${Errors}
                ClearErrors
                ${setupData}
                Call fnc_startup_options_Create
                nsDialogs::Show $hCtl_startup_options
              ${Else}
                ${setupData}
                StrCpy $option_assoc "1"
                StrCpy $option_proxy "1"
                StrCpy $option_visual "1"
                StrCpy $option_behavior "1"
              ${EndIf}
            ${Else}
              CopyFiles /SILENT "$EXEDIR\EmacsOptions.exe" "$EXEDIR\EmacsBuild.exe"
              StrCpy $option_build "1"
            ${EndIf}
          ${Else}
            StrCpy $option_download "1"
          ${EndIf}
      ${EndIf}
    ${EndIf}
  FunctionEnd
  
  Function fnc_startup_options_Validate
    ${If} $option_download == ""
      ${NSD_LV_GetCheckState} $hCtl_startup_options_Select 0 $option_assoc
      ${NSD_LV_GetCheckState} $hCtl_startup_options_Select 1 $option_proxy
      ${NSD_LV_GetCheckState} $hCtl_startup_options_Select 2 $option_behavior
      ${NSD_LV_GetCheckState} $hCtl_startup_options_Select 3 $option_visual
      ${NSD_LV_GetCheckState} $hCtl_startup_options_Select 4 $option_download
      StrCpy $option_startup "1"
    ${EndIf}
  FunctionEnd
  
#+END_SRC

** Behavior
*** Dialog Definitions
#+BEGIN_SRC nsis
  ; ========================================================
  ; This file was generated by NSISDialogDesigner 0.9.16.0
  ; http://coolsoft.altervista.org/nsisdialogdesigner
  ; ========================================================
  
  ; handle variables
  Var hCtl_behavior
  Var hCtl_behavior_GroupBox1
  Var hCtl_behavior_newFrame
  Var hCtl_behavior_Debug
  Var hCtl_behavior_Label2
  Var hCtl_behavior_Daemon
  Var hCtl_behavior_Label1
  Var hCtl_behavior_StartupScript
  Var hCtl_behavior_DefaultVersion
  Var hCtl_behavior_Home_Txt
  Var hCtl_behavior_Home_Btn
  Var hCtl_behavior_Label3
  Var hCtl_behavior_ZipBin
  Var hCtl_behavior_Clean
  Var hCtl_behavior_GroupBox2
  Var hCtl_behavior_editWith
  Var hCtl_behavior_orgProtocol
  Var hCtl_behavior_LiberKey
  
  
  ; dialog create function
  Function fnc_behavior_Create
    
    ; === behavior (type: Dialog) ===
    nsDialogs::Create 1018
    Pop $hCtl_behavior
    ${If} $hCtl_behavior == error
      Abort
    ${EndIf}
    !insertmacro MUI_HEADER_TEXT "EmacsPortable.App Behavior" "This allows the user to change the startup options, home directory, and what EmacsPortable.App integrates with."
    
    ; === Label1 (type: Label) ===
    ${NSD_CreateLabel} 13u 19u 54u 13u "Default Version"
    Pop $hCtl_behavior_Label1
    
    ; === DefaultVersion (type: DropList) ===
    ${NSD_CreateDropList} 70u 17u 51u 12u ""
    Pop $hCtl_behavior_DefaultVersion
    SetCtlColors $hCtl_behavior_DefaultVersion 0x000000 0xFFFFFF
  
    ReadIniStr $3 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Version"
    ClearErrors
    StrCpy $4 ""
    
    FindFirst $0 $1 $EXEDIR\App\emacs-*.*
    loop_emacs:
      StrCmp $1 "" done_emacs
      StrCpy $1 $1 "" 6
      StrCpy $2 $1
      StrCmp $2 $3 0 +2
      StrCpy $4 $2
      ${NSD_CB_AddString} $hCtl_behavior_DefaultVersion $1
      FindNext $0 $1
      Goto loop_emacs
    done_emacs:
      FindClose $0
      StrCmp $4 "" 0 +2
      StrCpy $4 $2
      ${NSD_CB_SelectString} $hCtl_behavior_DefaultVersion $4
      
      ; === Label2 (type: Label) ===
      ${NSD_CreateLabel} 134u 19u 52u 13u "Startup Script"
      Pop $hCtl_behavior_Label2
      
      ; === StartupScript (type: DropList) ===
      ${NSD_CreateDropListSorted} 190u 17u 94u 12u ""
  
      Pop $hCtl_behavior_StartupScript
      SetCtlColors $hCtl_behavior_StartupScript 0x000000 0xFFFFFF
  
      ReadIniStr $3 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Startup"
      ClearErrors
      StrCpy $4 ""
      
      FindFirst $0 $1 $EXEDIR\Data\start\*.*
    loop_start:
      StrCmp $1 "" done_start
      StrCmp $1 "shared" next_start
      StrCmp $1 "system" next_start
      StrCmp $1 "user" next_start
      StrCmp $1 "." next_start
      StrCmp $1 ".." next_start
      StrCpy $2 $1
      StrCmp $2 $3 0 +2
      StrCpy $4 $2
      ${NSD_CB_AddString} $hCtl_behavior_StartupScript $1
    next_start:
      FindNext $0 $1
      Goto loop_start
    done_start:
      FindClose $0
      StrCmp $4 "" 0 +2
      StrCpy $4 $2
      ${NSD_CB_SelectString} $hCtl_behavior_StartupScript $4
  
      ; === GroupBox1 (type: GroupBox) ===
      ${NSD_CreateGroupBox} 8u 7u 280u 77u "EmacsPortable.App Launching Options"
      Pop $hCtl_behavior_GroupBox1
      ; === Daemon (type: Checkbox) ===
      ${NSD_CreateCheckbox} 13u 34u 88u 14u "Use Pseudo-Daemon"
      Pop $hCtl_behavior_Daemon
      ${SetCheck} $hCtl_behavior_Daemon "Daemon"
  
      
      ; === newFrame (type: Checkbox) ===
      ${NSD_CreateCheckbox} 105u 34u 93u 14u "New Frame on file open"
      Pop $hCtl_behavior_newFrame
      ${SetUnCheck} $hCtl_behavior_newFrame "NewFrame"
      
      ; === Debug (type: Checkbox) ===
      ${NSD_CreateCheckbox} 200u 34u 84u 14u "Debug Startup (gdb)"
      Pop $hCtl_behavior_Debug
      ${SetUnCheck} $hCtl_behavior_Debug "Debug"
      
      
      
      ; === ZipBin (type: Checkbox) ===
      ${NSD_CreateCheckbox} 12u 48u 151u 14u "(Un)Zip Binaries && Run from %TEMP%"
      Pop $hCtl_behavior_ZipBin
      ${SetUnCheck} $hCtl_behavior_ZipBin "Zip"
      
      ; === Clean (type: Checkbox) ===
      ${NSD_CreateCheckbox} 167u 48u 117u 14u "Clean Residual Files (Stealth)"
      Pop $hCtl_behavior_Clean
      ${SetCheck} $hCtl_behavior_Clean "Clean"
      
      ; === Home_Txt (type: Text) ===
      ${NSD_CreateText} 70u 65u 192u 11u ""
      Pop $hCtl_behavior_Home_Txt
      ${SetDir} $hCtl_behavior_Home_Txt "Home" "EXEDIR:/Data/Home"
  
      ; === Label3 (type: Label) ===
      ${NSD_CreateLabel} 13u 65u 54u 13u "Home Directory"
      Pop $hCtl_behavior_Label3
      
      ; === Home_Btn (type: Button) ===
      ${NSD_CreateButton} 264u 65u 20u 11u "..."
      Pop $hCtl_behavior_Home_Btn
      ${NSD_OnClick} $hCtl_behavior_Home_Btn fnc_hCtl_behavior_Home_Click
  
      
      ; === GroupBox2 (type: GroupBox) ===
      ${NSD_CreateGroupBox} 8u 87u 280u 26u "Integration Options"
      Pop $hCtl_behavior_GroupBox2
      
      ; === editWith (type: Checkbox) ===
      ${NSD_CreateCheckbox} 12u 97u 89u 14u "Right-Click $\"Edit With$\""
      Pop $hCtl_behavior_editWith
      ${SetCheck} $hCtl_behavior_editWith "RightEdit"
      
      ; === orgProtocol (type: Checkbox) ===
      ${NSD_CreateCheckbox} 105u 97u 58u 14u "org-protocol"
      Pop $hCtl_behavior_orgProtocol
      ${SetCheck} $hCtl_behavior_orgProtocol "OrgProtocol"
      
      ; === LiberKey (type: Checkbox) ===
      ${NSD_CreateCheckbox} 167u 97u 47u 14u "LiberKey"
      Pop $hCtl_behavior_LiberKey
      ${SetUnCheck} $hCtl_behavior_LiberKey "LiberKey"
      
  FunctionEnd
  
  
  ; dialog show function
  Function fnc_behavior_Show
    ${If} $option_behavior == "1"
      Call fnc_behavior_Create
      nsDialogs::Show $hCtl_behavior
    ${EndIf}
  FunctionEnd
  
  
  ; onClick handler for DirRequest Button $hCtl_behavior_Home_Btn
  Function fnc_hCtl_behavior_Home_Click
    Pop $R0
    ${If} $R0 == $hCtl_behavior_Home_Btn
      ${NSD_GetText} $hCtl_behavior_Home_Txt $R0
      ${ConvertToFile} $R0 $R0
      nsDialogs::SelectFolderDialog /NOUNLOAD "" "$R0"
      Pop $R0
      ${If} "$R0" != "error"
        ${ConvertToAlias} $R0 $R0
        ${NSD_SetText} $hCtl_behavior_Home_Txt "$R0"
      ${EndIf}
    ${EndIf}
  FunctionEnd
  
#+END_SRC

*** Validation Function
#+BEGIN_SRC nsis
  Function fnc_behavior_Validate
    ## Save Data.
    ${If} $option_behavior == "1"
      ${WriteCheck} $hCtl_behavior_newFrame "NewFrame"
      ${WriteCheck} $hCtl_behavior_Debug "Debug"
      ${WriteCheck} $hCtl_behavior_Daemon "Daemon"
      ${WriteCheck} $hCtl_behavior_ZipBin "Zip"
      ${WriteCheck} $hCtl_behavior_Clean "Clean"
      ${WriteCheck} $hCtl_behavior_editWith "RightEdit"
      ${WriteCheck} $hCtl_behavior_orgProtocol "OrgProtocol"
      ${WriteCheck} $hCtl_behavior_LiberKey "LiberKey"
      
      ${WriteText} $hCtl_behavior_Home_Txt "Home"
      
      ${WriteCB} $hCtl_behavior_DefaultVersion "Version"
      ${WriteCB} $hCtl_behavior_StartupScript "Startup"
    ${EndIf}
  FunctionEnd
  
#+END_SRC

** Visuals
*** Dialog Definitions
#+BEGIN_SRC nsis
  ; ========================================================
  ; This file was generated by NSISDialogDesigner 0.9.16.0
  ; http://coolsoft.altervista.org/nsisdialogdesigner
  ; ========================================================
  
  ; handle variables
  Var hCtl_visuals
  Var hCtl_visuals_GroupBox1
  Var hCtl_visuals_FontName
  Var hCtl_visuals_Label1
  Var hCtl_visuals_FontLabel
  Var hCtl_visuals_Label2
  Var hCtl_visuals_Label3
  Var hCtl_visuals_fg
  Var hCtl_visuals_bg
  Var hCtl_visuals_FontSize
  Var hCtl_visuals_sync
  Var hCtl_visuals_GroupBox2
  Var hCtl_visuals_Label5
  Var hCtl_visuals_Label7
  Var hCtl_visuals_Label4
  Var hCtl_visuals_Label6
  Var hCtl_visuals_gh
  Var hCtl_visuals_gw
  Var hCtl_visuals_gx
  Var hCtl_visuals_gy
  Var hCtl_visuals_GroupBox3
  Var hCtl_visuals_mn
  Var hCtl_visuals_max
  Var hCtl_visuals_mw
  Var hCtl_visuals_mh
  Var hCtl_visuals_mnf
  
  
  ; dialog create function
  Function fnc_visuals_Create
    
    ; === visuals (type: Dialog) ===
    nsDialogs::Create 1018
    Pop $hCtl_visuals
    ${If} $hCtl_visuals == error
      Abort
    ${EndIf}
    !insertmacro MUI_HEADER_TEXT "EmacsPortable.App Visual Options" "Sets the initial foreground, background, font, and positioning options of EmacsPortable.App"
    
    ; === GroupBox1 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 7u 280u 51u "Emacs Display Options"
    Pop $hCtl_visuals_GroupBox1
    
    ; === FontName (type: ComboBox) ===
    ${NSD_CreateComboBoxSorted} 59u 17u 123u 12u ""
    Pop $hCtl_visuals_FontName
    SetCtlColors $hCtl_visuals_FontName 0x000000 0xFFFFFF
    Call SetFontOptions
    
    ${NSD_CB_SelectString} $hCtl_visuals_FontName $3
  
    ; === FontSize (type: Number) ===
    ${NSD_CreateNumber} 222u 17u 62u 11u ""
    Pop $hCtl_visuals_FontSize
    ${SetText} $hCtl_visuals_FontSize "FontSize" "12"
  
    
    ; === Label1 (type: Label) ===
    ${NSD_CreateLabel} 186u 19u 32u 13u "Size"
    Pop $hCtl_visuals_Label1
    
    ; === FontLabel (type: Label) ===
    ${NSD_CreateLabel} 12u 19u 43u 13u "Font Name:"
    Pop $hCtl_visuals_FontLabel
    
    ; === Label2 (type: Label) ===
    ${NSD_CreateLabel} 12u 32u 66u 13u "Foreground Color:"
    Pop $hCtl_visuals_Label2
    
    ; === Label3 (type: Label) ===
    ${NSD_CreateLabel} 152u 32u 66u 13u "Background Color:"
    Pop $hCtl_visuals_Label3
    
    ; === fg (type: Text) ===
    ${NSD_CreateText} 81u 30u 56u 11u ""
    Pop $hCtl_visuals_fg
    ${SetText} $hCtl_visuals_fg "Foreground" ""
    
    ; === bg (type: Text) ===
    ${NSD_CreateText} 222u 30u 62u 11u "" 
    Pop $hCtl_visuals_bg
    ${SetText} $hCtl_visuals_bg "Background" ""
    
    
    ; === sync (type: Link) ===
    ${NSD_CreateLink} 12u 43u 272u 13u "Sync EmacsPortable.App's current colors and fonts with the startup options"
    Pop $hCtl_visuals_sync
    ${NSD_OnClick} $hCtl_visuals_sync SyncColor
    
    ; === GroupBox2 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 61u 152u 61u "Emacs Frame/Window Geometry"
    Pop $hCtl_visuals_GroupBox2
    
    ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Geometry"
    
    StrCpy $R2 ""
    StrCpy $R3 ""
    StrCpy $R4 ""
    StrCpy $R5 ""
    
    ${Explode} $R1 "x" "$R0"
    
    ${If} $R1 == 2
      Pop $R2
      Pop $R3
      ${Explode} $R4 "+" $R3
      ${If} $R4 == 3
        Pop $R3
        Pop $R4
        Pop $R5
      ${Else}
        StrCpy $R4 ""
      ${EndIf}
    ${Else}
      ${Explode} $R1 "X" "$R0"
      ${If} $R1 == 2
        Pop $R2
        Pop $R3
        ${Explode} $R4 "+" $R3
        ${If} $R4 == 3
          Pop $R5
          Pop $R3
          Pop $R4
        ${Else}
          StrCpy $R4 ""
        ${EndIf}
      ${EndIf}
    ${EndIf}
    
    ; === Label5 (type: Label) ===
    ${NSD_CreateLabel} 12u 83u 107u 13u "Initial Frame Height (rows)"
    Pop $hCtl_visuals_Label5
    
    ; === Label7 (type: Label) ===
    ${NSD_CreateLabel} 12u 109u 107u 13u "Down offset (Y),top left corner "
    Pop $hCtl_visuals_Label7
    
    ; === Label4 (type: Label) ===
    ${NSD_CreateLabel} 12u 70u 107u 13u "Initial Frame Width (characters)"
    Pop $hCtl_visuals_Label4
    
    ; === Label6 (type: Label) ===
    ${NSD_CreateLabel} 12u 96u 107u 13u "Right offset (X),top left corner "
    Pop $hCtl_visuals_Label6
    
   
    ; === gw (type: Number) ===
    ${NSD_CreateNumber} 123u 68u 32u 11u ""
    Pop $hCtl_visuals_gw
    ${NSD_SetText} $hCtl_visuals_gw $R2
  
    ; === gh (type: Number) ===
    ${NSD_CreateNumber} 123u 81u 32u 11u ""
    Pop $hCtl_visuals_gh
    ${NSD_SetText} $hCtl_visuals_gh $R3
    
    ; === gx (type: Number) ===
    ${NSD_CreateNumber} 123u 94u 32u 11u ""
    Pop $hCtl_visuals_gx
    ${NSD_SetText} $hCtl_visuals_gx $R4
    
    ; === gy (type: Number) ===
    ${NSD_CreateNumber} 123u 107u 32u 11u ""
    Pop $hCtl_visuals_gy
    ${NSD_SetText} $hCtl_visuals_gy $R5
    
    ; === GroupBox3 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 164u 61u 123u 61u "Maximization Options"
    Pop $hCtl_visuals_GroupBox3
    
    ; === mn (type: RadioButton) ===
    ${NSD_CreateRadioButton} 168u 70u 39u 14u "None"
    Pop $hCtl_visuals_mn
  
    ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Max"
    ${If} $R0 == "0"
    ${OrIf} ${Errors}
      ClearErrors
      ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Fullwidth"
      ${If} $R0 == "0"
      ${OrIf} ${Errors}
        ClearErrors
        ReadIniStr $R0 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Fullheight"
        ${If} $R0 == "0"
        ${OrIf} ${Errors}
          ClearErrors
          ${NSD_Check} $hCtl_visuals_mn 
        ${EndIf}
      ${EndIf}
    ${EndIf}
    ClearErrors
    
    ; === mm (type: RadioButton) ===
    ${NSD_CreateRadioButton} 222u 70u 47u 14u "Maximize"
    Pop $hCtl_visuals_max
    ${SetUnCheck} $hCtl_visuals_max "Max"
    
    ; === mw (type: RadioButton) ===
    ${NSD_CreateRadioButton} 168u 87u 51u 14u "Full Width"
    Pop $hCtl_visuals_mw
    ${SetUnCheck} $hCtl_visuals_mw "Fullwidth"
    
    ; === mh (type: RadioButton) ===
    ${NSD_CreateRadioButton} 223u 87u 51u 14u "Full Height"
    Pop $hCtl_visuals_mh
    ${SetUnCheck} $hCtl_visuals_mh "Fullheight"
    
    ; === mnf (type: Checkbox) ===
    ${NSD_CreateCheckbox} 168u 104u 100u 14u "Maximize New Frames"
    Pop $hCtl_visuals_mnf
    ${SetUnCheck} $hCtl_visuals_mnf "MaxApplyNew"
    ClearErrors
    
  FunctionEnd
  
  ; dialog show function
  Function fnc_visuals_Show
    ${If} $option_visual == "1"
      Call fnc_visuals_Create
      nsDialogs::Show $hCtl_visuals
    ${EndIf}
  FunctionEnd
  
#+END_SRC

*** Support Functions
#+BEGIN_SRC nsis
  Function SetFontOptions
    ReadIniStr $3 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Font"
    ClearErrors
    StrCpy $4 $3
    IfFileExists "$EXEDIR\App\ini\fonts.ini" 0 no_fonts
    EnumIni::Section "$EXEDIR\App\ini\fonts.ini" "fonts1"
    pop $R0
    StrCmp $R0 "error" no_fonts
    loop_fonts:
      IntCmp $R0 "0" no_fonts no_fonts 0
      Pop $R1
      StrCmp "$3" "$R1" 0 +2
      StrCpy "$3" ""
      ${NSD_CB_AddString} $hCtl_visuals_FontName $R1
    no_install:
      IntOp $R0 $R0 - 1
      Goto loop_fonts
    no_fonts:
      StrCmp "$3" "" clear
      ${NSD_CB_AddString} $hCtl_visuals_FontName $3
    clear:
      ${NSD_CB_SelectString} $hCtl_visuals_FontName $4
      ClearErrors
  FunctionEnd
  
  Function SyncColor
    ExecWait `"$EXEDIR\EmacsPortableApp.exe" /COLORSYNC`
    ${SetText} $hCtl_visuals_FontSize "FontSize" "12"
    ${SetText} $hCtl_visuals_bg "Background" ""
    ${SetText} $hCtl_visuals_fg "Foreground" ""
    SendMessage $hCtl_visuals_FontName ${CB_RESETCONTENT} $0 $0
    Call SetFontOptions
  FunctionEnd
  
#+END_SRC

*** Validation Function
#+BEGIN_SRC nsis
  Function fnc_visuals_Validate
    ${If} $option_visual == "1"
      ${WriteCheck} $hCtl_visuals_max "Max"
      ${WriteCheck} $hCtl_visuals_mw "Fullwidth"
      ${WriteCheck} $hCtl_visuals_mh "Fullheight"
      ${WriteCheck} $hCtl_visuals_mnf "MaxApplyNew"
      
      ${WriteText} $hCtl_visuals_FontSize "FontSize"
      ${WriteText} $hCtl_visuals_bg "Background"
      ${WriteText} $hCtl_visuals_fg "Foreground"
  
      ${WriteCB} $hCtl_visuals_FontName "Font"
      
      ${NSD_GetText} $hCtl_visuals_gh $R3
      ${NSD_GetText} $hCtl_visuals_gw $R2
      ${NSD_GetText} $hCtl_visuals_gx $R4
      ${NSD_GetText} $hCtl_visuals_gy $R5
      StrCpy $R0 ""
      ${If} $R2 != ""
      ${AndIf} $R3 != ""
        StrCpy $R0 "$R2x$R3"
        ${If} $R4 != ""
        ${AndIf} $R5 != ""
          StrCpy $R0 "$R0+$R4+$R5"
        ${EndIf}
      ${EndIf}
      WriteIniStr "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Geometry" $R0
    ${EndIf}
  FunctionEnd
  
#+END_SRC

** Proxy
*** Dialog Definition
#+BEGIN_SRC nsis
  ; ========================================================
  ; This file was generated by NSISDialogDesigner 0.9.16.0
  ; http://coolsoft.altervista.org/nsisdialogdesigner
  ; ========================================================
  
  ; handle variables
  Var hCtl_proxy
  Var hCtl_proxy_GroupBox1
  Var hCtl_proxy_server
  Var hCtl_proxy_UserName
  Var hCtl_proxy_Label1
  Var hCtl_proxy_Label2
  Var hCtl_proxy_port
  Var hCtl_proxy_Label3
  Var hCtl_proxy_Label5
  Var hCtl_proxy_Label4
  Var hCtl_proxy_Password1
  Var hCtl_proxy_Password2
  Var hCtl_proxy_GroupBox2
  Var hCtl_proxy_FileRequest1_Txt
  Var hCtl_proxy_FileRequest1_Btn
  Var hCtl_proxy_Label6
  Var hCtl_proxy_putty_portable
  Var hCtl_proxy_putty
  
  
  ; dialog create function
  Function fnc_proxy_Create
  
    ; === proxy (type: Dialog) ===
    nsDialogs::Create 1018
    Pop $hCtl_proxy
    ${If} $hCtl_proxy == error
      Abort
    ${EndIf}
    ${If} $PROXY_IDE == ""
      StrCpy $7 "$EXEDIR"
      ${SetupProxy}
      Pop $0
    ${EndIf}
    !insertmacro MUI_HEADER_TEXT "Proxy Settings" "This sets the proxy setings for the current network ($PROXY_IDE)"
    
    ; === GroupBox1 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 7u 280u 71u "Proxy Settings ($PROXY_IDE)"
    Pop $hCtl_proxy_GroupBox1
    
    ; === TextBox1 (type: Text) ===
    ${NSD_CreateText} 79u 16u 98u 11u ""
    Pop $hCtl_proxy_server
  
    ; === TextBox2 (type: Text) ===
    ${NSD_CreateText} 230u 14u 53u 11u ""
    Pop $hCtl_proxy_port
    
    ; === UserName (type: Text) ===
    ${NSD_CreateText} 79u 30u 205u 11u ""
    Pop $hCtl_proxy_UserName
    
    ; === Label1 (type: Label) ===
    ${NSD_CreateLabel} 12u 16u 46u 13u "Proxy Server"
    Pop $hCtl_proxy_Label1
    
    ; === Label2 (type: Label) ===
    ${NSD_CreateLabel} 186u 17u 40u 13u "Proxy Port"
    Pop $hCtl_proxy_Label2
    
  
    
    ; === Label3 (type: Label) ===
    ${NSD_CreateLabel} 12u 47u 37u 13u "Password"
    Pop $hCtl_proxy_Label3
    
    ; === Label5 (type: Label) ===
    ${NSD_CreateLabel} 12u 32u 53u 13u "User Name"
    Pop $hCtl_proxy_Label5
    
    ; === Label4 (type: Label) ===
    ${NSD_CreateLabel} 12u 61u 67u 13u "Confirm Password"
    Pop $hCtl_proxy_Label4
    
    ; === Password1 (type: Password) ===
    ${NSD_CreatePassword} 79u 45u 205u 11u ""
    Pop $hCtl_proxy_Password1
    
    ; === Password2 (type: Password) ===
    ${NSD_CreatePassword} 79u 60u 205u 11u ""
    Pop $hCtl_proxy_Password2
    
    ; === GroupBox2 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 81u 280u 41u "Putty Integration"
    Pop $hCtl_proxy_GroupBox2
    
    ; === FileRequest1_Txt (type: Text) ===
    ${NSD_CreateText} 79u 90u 184u 11u ""
    Pop $hCtl_proxy_FileRequest1_Txt
    
    ; === FileRequest1_Btn (type: Button) ===
    ${NSD_CreateButton} 264u 90u 20u 11u "..."
    Pop $hCtl_proxy_FileRequest1_Btn
    ${NSD_OnClick} $hCtl_proxy_FileRequest1_Btn fnc_hCtl_proxy_FileRequest1_Click
    
    ; === Label6 (type: Label) ===
    ${NSD_CreateLabel} 12u 90u 66u 13u "Putty Key to Load:"
    Pop $hCtl_proxy_Label6    
   
    ; === CheckBox1 (type: Checkbox) ===
    ${NSD_CreateCheckbox} 12u 105u 115u 14u "Apply Proxy Settings to Putty"
    Pop $hCtl_proxy_putty
  
    ; === CheckBox2 (type: Checkbox) ===
    ${NSD_CreateCheckbox} 131u 105u 153u 14u "Prefer Launching PuttyPortable"
    Pop $hCtl_proxy_putty_portable
  
    
    ${SetCheck} $hCtl_proxy_putty "ApplyPutty"
    ${SetCheck} $hCtl_proxy_putty_portable "PuttyPortable"
    
    ${SetDir} $hCtl_proxy_FileRequest1_Txt "PuttyKey" ""
    
    IfFileExists "$EXEDIR\Data\ini\proxy-$PROXY_IDE.ini" 0 end_proxy_init
    ${ReadProxy} $hCtl_proxy_server "Server"
    ${ReadProxy} $hCtl_proxy_port "Port"
    ${ReadProxy} $hCtl_proxy_UserName "User"
    ${ReadProxy} $hCtl_proxy_Password1 "Password"
    ${NSD_SetText} $hCtl_proxy_Password2 $R0
    
    end_proxy_init:
      ClearErrors
  FunctionEnd
  
  
  ; dialog show function
  Function fnc_proxy_Show
    ${If} $option_proxy == "1"
      Call fnc_proxy_Create
      nsDialogs::Show $hCtl_proxy
    ${EndIf}
  FunctionEnd
  
  
  ; onClick handler for FileRequest Button $hCtl_proxy_FileRequest1_Btn
  Function fnc_hCtl_proxy_FileRequest1_Click
    Pop $R0
    ${If} $R0 == $hCtl_proxy_FileRequest1_Btn
      ${NSD_GetText} $hCtl_proxy_FileRequest1_Txt $R0
      ${ConvertToFile} $R0 $R0
      nsDialogs::SelectFileDialog open "$R0" ""
      Pop $R0
      ${If} "$R0" != "error"
        ${ConvertToAlias} $R0 $R0
        ${NSD_SetText} $hCtl_proxy_FileRequest1_Txt "$R0"
      ${EndIf}
    ${EndIf}
  FunctionEnd
  
#+END_SRC

*** Validation Function
#+BEGIN_SRC nsis
  Function fnc_proxy_Validate
    ${If} $option_proxy == "1"
      ${WriteCheck} $hCtl_proxy_putty "ApplyPutty"
      ${WriteCheck} $hCtl_proxy_putty_portable "PuttyPortable"
  
      ${WriteText} $hCtl_proxy_FileRequest1_Txt "PuttyKey"
  
      ${WriteProxy} $hCtl_proxy_server "Server"
      ${WriteProxy} $hCtl_proxy_port "Port"
      ${WriteProxy} $hCtl_proxy_UserName "User"
      ${WriteProxy} $hCtl_proxy_Password1 "Password"
    ${EndIf}
  FunctionEnd
  
#+END_SRC


** Associations
*** Dialog Definition
#+BEGIN_SRC nsis
  Var CurrentDesc
  Var CurrentIdx
  Var RunningPopSteal
  ; handle variables
  Var hCtl_assocs
  Var hCtl_assocs_Label1
  Var hCtl_assocs_Assoc
  Var hCtl_assocs_AssocList
  Var hCtl_assocs_New
  Var hCtl_assocs_Delete
  Var hCtl_assocs_Label2
  Var hCtl_assocs_Steal
  Var hCtl_assocs_GroupBox1
  Var hCtl_assocs_Label4
  Var hCtl_assocs_Label3
  Var hCtl_assocs_Exts
  Var hCtl_assocs_Desc
  Var removed_assoc
  Var pinned_assoc
  Var assoc_md5
  ; dialog create function
  Function fnc_assocs_Create
    IfFileExists "$EPEXE\Data\ini\assoc.ini" +2
    CopyFiles /SILENT "$EPEXE\App\ini\assoc.ini" "$EPEXE\Data\ini\assoc.ini"
    StrCmp $assoc_md5 "" 0 +3
    md5dll::GetMD5File "$EPEXE\Data\ini\assoc.ini"
    Pop $assoc_md5
    
    ; === assocs (type: Dialog) ===
    nsDialogs::Create 1018
    Pop $hCtl_assocs
    ${If} $hCtl_assocs == error
    ${OrIf} $option_assoc != "1"
      Abort
    ${EndIf}
    !insertmacro MUI_HEADER_TEXT "EmacsPortable.App File Associations" "Determines the file-assocation options for EmacsPortable.App"
    
    ; === Label1 (type: Label) ===
    ${NSD_CreateLabel} 8u 5u 121u 13u "EmacsPortable.App Registered File"
    Pop $hCtl_assocs_Label1
    
    ; === CheckBox1 (type: Checkbox) ===
    ${NSD_CreateCheckbox} 219u 2u 68u 14u "Associate Files"
    Pop $hCtl_assocs_Assoc
    ${SetUnCheck} $hCtl_assocs_Assoc "Assoc"
    
    ; === AssocList (type: ListBox) ===
    ${NSD_CreateListViewSorted} 11u 17u 276u 53u "Listview"
    Pop $hCtl_assocs_AssocList
    ${NSD_LV_InsertColumn} $hCtl_assocs_AssocList 0 275 "File Type"
    ${NSD_LV_InsertColumn} $hCtl_assocs_AssocList 1 110 "Extensions"
    ${NSD_OnNotify} $hCtl_assocs_AssocList hCtl_assocs_AssocList_Notify
    
    #SetCtlColors $hCtl_assocs_AssocList 0x000000 0xFFFFFF
    
    ; === New (type: Button) ===
    ${NSD_CreateButton} 11u 74u 49u 13u "New"
    Pop $hCtl_assocs_New
    ${NSD_OnClick} $hCtl_assocs_New Assoc_New
    
    ${NSD_CreateButton} 64u 74u 49u 13u "Delete"
    Pop $hCtl_assocs_Delete
    ${NSD_OnClick} $hCtl_assocs_Delete Assoc_Del
    
    ; === Label2 (type: Label) ===
    ${NSD_CreateLabel} 219u 74u 66u 13u "Steal Associations"
    Pop $hCtl_assocs_Label2
    
    ; === Steal (type: ListBox) ===
    ${NSD_CreateListBoxMultiSelectSort} 219u 86u 68u 39u ""
    Pop $hCtl_assocs_Steal
    SetCtlColors $hCtl_assocs_Steal 0x000000 0xFFFFFF
    ${NSD_OnClick} $hCtl_assocs_Steal Assoc_Pri_Save
    
    ; === GroupBox1 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 11u 88u 204u 37u "Details"
    Pop $hCtl_assocs_GroupBox1
    
    ; === Label4 (type: Label) ===
    ${NSD_CreateLabel} 15u 110u 41u 13u "Extensions"
    Pop $hCtl_assocs_Label4
    
    ; === Label3 (type: Label) ===
    ${NSD_CreateLabel} 15u 97u 41u 13u "Description"
    Pop $hCtl_assocs_Label3
    
    ; === Exts (type: Text) ===
    ${NSD_CreateText} 60u 108u 147u 11u ""
    Pop $hCtl_assocs_Exts
    
    ; === Desc (type: Text) ===
    ${NSD_CreateText} 60u 95u 147u 11u ""
    Pop $hCtl_assocs_Desc
    
  FunctionEnd
  
  
  ; dialog show function
  Function fnc_assocs_Show
    ${If} $option_assoc == "1"
      Call fnc_assocs_Create
      Call GetFileTypes
      StrCpy $CurrentDesc ""
      StrCpy $CurrentIdx ""
      SendMessage $hCtl_assocs_AssocList ${LVM_SETEXTENDEDLISTVIEWSTYLE} 0 ${LVS_EX_FULLROWSELECT}
      ##EnableWindow $hCtl_assocs_New 0
      ${NSD_SetText} $hCtl_assocs_New "Save"
      EnableWindow $hCtl_assocs_Delete 0
      ${NSD_CreateTimer} PopulateSteal 700
      
      nsDialogs::Show $hCtl_assocs
    ${EndIf}
  FunctionEnd
  
  
#+END_SRC

*** Helper Functions
**** Validation function
#+BEGIN_SRC nsis
  Function fnc_assocs_Validate
    ${If} $option_assoc == "1"
      ${NSD_KillTimer} PopulateSteal
      ${WriteCheck} $hCtl_assocs_Assoc "Assoc"
      DeleteIniSec "$EXEDIR\Data\ini\assoc.ini" "assoc"
      SendMessage $hCtl_assocs_AssocList ${LVM_GETITEMCOUNT} 0 0 $R1
      IntOp $R1 $R1 - 1
      StrCpy $R9 ""
      ${For} $R2 0 $R1
        ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R2 0 $R3
        ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R2 1 $R4
        WriteIniStr "$EXEDIR\Data\ini\assoc.ini" "assoc" "$R3" "$R4"
        StrCpy $R9 "$R9,$R4"
      ${Next}
      ## Now delete any primary assocations not equal to 1
      EnumIni::Section "$EXEDIR\Data\ini\assoc.ini" "primary"
      pop $R0
      StrCmp $R0 "error" no_pri
      loop_pri:
        IntCmp $R0 "0" no_pri no_pri 0
        Pop $R1
        ReadIniStr $R2 "$EXEDIR\Data\ini\assoc.ini" "primary" "$R1"
        ${If} $R2 != "1"
          DeleteIniStr "$EXEDIR\Data\ini\assoc.ini" "primary" "$R1"
        ${Else}
          StrCpy $R8 "1"
          ${Explode}  $0  "," "$R9"
          ${For} $1 1 $0
            Pop $2
            ${If} $2 == "$R1"
              StrCpy $R8 "1"
            ${EndIf}
          ${Next}
          ${If} $R8 == ""
            DeleteIniStr "$EXEDIR\Data\ini\assoc.ini" "primary" "$R1"
          ${EndIf}
        ${EndIf}
      next:
        IntOp $R0 $R0 - 1
        Goto loop_pri
      no_pri:
        ClearErrors
    ${EndIf}
  FunctionEnd
  
#+END_SRC

**** Association List View
***** Setup File Types List View
#+BEGIN_SRC nsis
  Function GetFileTypes
    # Emacs Icon
    EnumINI::Section "$EXEDIR\Data\ini\assoc.ini" "assoc"
    Pop $R0
    StrCpy $R3 "" 
    StrCpy $R4 ""
    StrCmp $R0 "error" done_assoc
    StrCpy $R5 -1
    loop_assoc:
      IntCmp $R0 "0" done_assoc done_assoc 0
      Pop $R1
      IntOp $R5 $R5 + 1
      ${NSD_LV_InsertItem} $hCtl_assocs_AssocList $R5 "$R1"
      IntOp $R0 $R0 - 1
      Goto loop_assoc
    done_assoc:
      SendMessage $hCtl_assocs_AssocList ${LVM_GETITEMCOUNT} 0 0 $R3
      IntOp $R3 $R3 - 1
      ${For} $R0 0 $R3
        ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R0 0 $R1
        ReadINIStr $R2 "$EXEDIR\Data\ini\assoc.ini" "assoc" "$R1"
        ${NSD_LV_SetItemText} $hCtl_assocs_AssocList $R0 1 '$R2'
      ${Next}
      ClearErrors
  FunctionEnd
  
#+END_SRC

***** Clicking List View action
#+BEGIN_SRC nsis
  Function hCtl_assocs_AssocList_Notify
    System::Store SR1R1R0
    ${Switch} $R1
      ${Case} ${LVN_ITEMCHANGED}
        ${If} $RunningPopSteal != "1"
          Call Assoc_Pri_Save
          System::Call `*$R0(i,i,i,i.R2,i,i,i,i,i,i)`     # Get the INDEX of the clicked item
          IntOp $R2 $8 + $R2                              # Move pointer to the INDEX-th position
          ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R2 0 $R3
          StrCpy $CurrentIdx $R2
          ${NSD_SetText} $hCtl_assocs_Desc $R3
          StrCpy $CurrentDesc $R3
          ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R2 1 $R3
          ${NSD_SetText} $hCtl_assocs_Exts $R3
          Call PopulateSteal
          ${NSD_SetText} $hCtl_assocs_New "New"
          EnableWindow $hCtl_assocs_New 1
          EnableWindow $hCtl_assocs_Delete 1
          ##SendMessage $hCtl_assocs_Steal ${LB_GETSELITEMS} 9999
        ${EndIf}
        ${Break}
    ${EndSwitch}
    System::Store L
    end:
      ClearErrors
  FunctionEnd
#+END_SRC
**** Steal List Box
***** Clear Steal List Box
#+BEGIN_SRC nsis
  Function ClearSteal
    ${NSD_LB_Clear} $hCtl_assocs_Steal
  FunctionEnd
  
#+END_SRC

***** Populate Steal List Box
#+BEGIN_SRC nsis
  Var lastExts
  Function PopulateSteal
    ${NSD_KillTimer} PopulateSteal
    StrCpy $RunningPopSteal "1"
    Call Assoc_Pri_Save
    ${NSD_GetText} $hCtl_assocs_Desc $R0
    ${If} $CurrentDesc != $R0
    ${AndIf} $CurrentDesc != ""
      SendMessage $hCtl_assocs_AssocList ${LVM_DELETEITEM} $CurrentIdx 0
      SendMessage $hCtl_assocs_AssocList ${LVM_GETITEMCOUNT} 0 0 $R1
      ${NSD_LV_InsertItem} $hCtl_assocs_AssocList $R1 "$R0"
      ${For} $R2 0 $R1
        ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R2 0 $R3
        ${If} $R3 == "$R0"
          StrCpy $CurrentIdx $R2
          SendMessage $hCtl_assocs_AssocList ${LB_SELECTSTRING} $R2 0
          ${ExitFor}
        ${EndIf}
      ${Next}
      StrCpy $CurrentDesc "$R0"
      StrCpy $lastExts ""
    ${EndIf}
    ${NSD_GetText} $hCtl_assocs_Exts $R0
    ${StrRep} $R0 $R0 "." "" 
    ${StrRep} $R0 $R0 " " "" 
    ${StrRep} $R0 $R0 ";" ","
    ${StrRep} $R0 $R0 "|" ","
    ${If} $lastExts != $R0
      ${If} $CurrentIdx != ""
        ${NSD_LV_SetItemText} $hCtl_assocs_AssocList $CurrentIdx 1 '$R0'
      ${EndIf}
      StrCpy $lastExts $R0
      Push $R0
      Pop $R0
      Call ClearSteal
      ${Explode}  $0  "," "$R0"
      ${For} $1 1 $0
        Pop $2
        ${If} $2 != ""
          SendMessage $hCtl_assocs_Steal ${LB_GETCOUNT} 0 0 $4
          StrCpy $6 "1"
          ${For} $3 0 $4
            System::Call "user32::SendMessage(i$hCtl_assocs_Steal,i${LB_GETTEXT},i$3,t.r5)"
            ${If} "$5" == "$2"
              StrCpy $6 ""
              ${ExitFor}
            ${EndIf}
          ${Next}
          ${If} $6 == "1"
            SendMessage $hCtl_assocs_Steal ${LB_ADDSTRING} 0 "STR:$2"
          ${EndIf}
        ${EndIf}
      ${Next}
      
      ${Explode}  $0  "," "$R0"
      ${For} $1 1 $0
        Pop $2
        ReadIniStr $R5 "$EXEDIR\Data\ini\assoc.ini" "primary" "$2"
        ClearErrors
        ${If} $R5 == "1"
          SendMessage $hCtl_assocs_Steal ${LB_FINDSTRINGEXACT} 0 "STR:$2" $3
          StrCmp "$3" "-1" +2
          SendMessage $hCtl_assocs_Steal ${LB_SETSEL} 1 $3
        ${EndIf}
      ${Next}
    ${EndIf}
    ${NSD_GetText} $hCtl_assocs_Desc $R0
    StrCpy $RunningPopSteal ""
    ${NSD_CreateTimer} PopulateSteal 700 
  FunctionEnd
#+END_SRC

**** Save Current Selection
#+BEGIN_SRC nsis
  Function Assoc_Pri_Save
    Push $R9
    Push $1
    Push $2
    SendMessage $hCtl_assocs_Steal ${LB_GETCOUNT} 0 0 $R9
    loop:
      IntOp $R9 $R9 - 1
      IntCmp $R9 0 0 end_loop
      System::Call "user32::SendMessage(i$hCtl_assocs_Steal,i${LB_GETTEXT},i$R9,t.r1)"
      SendMessage $hCtl_assocs_Steal ${LB_GETSEL} $R9 0 $2
      ${If} $2 > 0
        WriteIniStr "$EXEDIR\Data\ini\assoc.ini" "primary" "$1" "1"
      ${Else}
        DeleteIniStr "$EXEDIR\Data\ini\assoc.ini" "primary" "$1"
      ${EndIf}
      Goto loop
    end_loop:
      Pop $2
      Pop $1
      Pop $R9
      ClearErrors
  FunctionEnd
  
#+END_SRC

**** New/Save Button
#+BEGIN_SRC nsis
  Function Assoc_New
    ${NSD_KillTimer} PopulateSteal
    StrCpy $RunningPopSteal "1"
    ${If} $CurrentDesc == ""
      ## Save
      ${NSD_GetText} $hCtl_assocs_Desc $R0
      SendMessage $hCtl_assocs_AssocList ${LVM_GETITEMCOUNT} 0 0 $R1
      ${NSD_LV_InsertItem} $hCtl_assocs_AssocList $R1 "$R0"
      ${For} $R2 0 $R1
        ${NSD_LV_GetItemText} $hCtl_assocs_AssocList $R2 0 $R3
        ${If} $R3 == "$R0"
          StrCpy $CurrentIdx $R2
          SendMessage $hCtl_assocs_AssocList ${LB_SELECTSTRING} $R2 0
          ${ExitFor}
        ${EndIf}
      ${Next}
      StrCpy $CurrentDesc "$R0"
      ${NSD_GetText} $hCtl_assocs_Exts $R0
      ${StrRep} $R0 $R0 "." "" 
      ${StrRep} $R0 $R0 " " "" 
      ${StrRep} $R0 $R0 ";" ","
      ${StrRep} $R0 $R0 "|" ","
      ${NSD_LV_SetItemText} $hCtl_assocs_AssocList $CurrentIdx 1 '$R0'
      StrCpy $lastExts $R0
      ${NSD_SetText} $hCtl_assocs_New "New"
      EnableWindow $hCtl_assocs_Delete 1
    ${Else}
      ## New
      ${NSD_SetText} $hCtl_assocs_New "Save"
      EnableWindow $hCtl_assocs_Delete 0
      Call ClearSteal
      ${NSD_SetText} $hCtl_assocs_Desc ""
      ${NSD_SetText} $hCtl_assocs_Exts ""
      StrCpy $CurrentDesc ""
      StrCpy $CurrentIdx ""
    ${EndIf}
    StrCpy $RunningPopSteal ""
    ${NSD_CreateTimer} PopulateSteal 700 
  FunctionEnd
#+END_SRC

**** Delete Button
#+BEGIN_SRC nsis
  Function  Assoc_Del
    ${NSD_KillTimer} PopulateSteal
    StrCpy $RunningPopSteal "1"
    ${If} $CurrentIdx != ""
      SendMessage $hCtl_assocs_AssocList ${LVM_DELETEITEM} $CurrentIdx 0
      Call ClearSteal
      ${NSD_SetText} $hCtl_assocs_Desc ""
      ${NSD_SetText} $hCtl_assocs_Exts ""
      StrCpy $CurrentDesc ""
      StrCpy $CurrentIdx ""
    ${EndIf}
    StrCpy $RunningPopSteal ""
    ${NSD_CreateTimer} PopulateSteal 700
  FunctionEnd
#+END_SRC

**** Add/Remove Associations
#+BEGIN_SRC nsis
  Function RestoreAssoc
    StrCmp $removed_assoc "1" 0 end
    IfFileExists "$EXEDIR\App\eps\ep-liberkey.exe" 0 +2
    ExecWait "$EXEDIR\App\eps\ep-liberkey.exe"
    
    IfFileExists "$EXEDIR\App\eps\ep-assoc.exe" 0 +3
    ExecWait "$EXEDIR\App\eps\ep-assoc.exe"
    
    StrCmp $pinned_assoc "1" 0 +7
    IfFileExists "$TEMP\ep\rm-ep-assoc.exe" 0 +3
    CopyFiles /SILENT "$TEMP\ep\rm-ep-assoc.exe" "$EXEDIR\App\eps\rm-ep-assoc.exe"
    Delete "$TEMP\ep\rm-ep-assoc.exe"
    IfFileExists "$TEMP\rm-ep-assoc.exe" 0 +3
    CopyFiles /SILENT "$TEMP\rm-ep-assoc.exe" "$EXEDIR\App\eps\rm-ep-assoc.exe"
    Delete "$TEMP\rm-ep-assoc.exe"
    end:
      ClearErrors
  FunctionEnd
  
  Function RemoveAssoc
    StrCmp $removed_assoc "1" end
    IfFileExists "$EXEDIR\App\eps\rm-ep-liberkey.exe" 0 +2
    ExecWait "$EXEDIR\App\eps\rm-ep-liberkey.exe"
    
    IfFileExists "$EXEDIR\App\eps\rm-ep-assoc.exe" 0 +3
    ExecWait "$EXEDIR\App\eps\rm-ep-assoc.exe"
    StrCpy $pinned_assoc "1"    
    
    IfFileExists "$TEMP\ep\rm-ep-assoc.exe" 0 +2
    ExecWait "$TEMP\ep\rm-ep-assoc.exe"
    StrCpy $removed_assoc "1"
    end:
      ClearErrors
  FunctionEnd
#+END_SRC

** Download
*** Dialog Definition
#+BEGIN_SRC nsis
  ; handle variables
  Var hCtl_download
  Var hCtl_download_EmacsDownload
  Var hCtl_download_DownloadVersion
  Var hCtl_download_Label1
  Var hCtl_download_DownloadMac
  Var hCtl_download_GroupBox2
  Var hCtl_download_GnuWin32Utils
  Var hCtl_download_EZWinUtils
  Var hCtl_download_LinkToSelect
  Var hCtl_download_Startup
  Var hCtl_download_DropList1
  Var hCtl_download_Label2
  Var hCtl_download_GroupBox1
  Var hCtl_download_Droplist
  Var hCtl_download_Label3
  Var hCtl_download_Link2
  Var hCtl_download_Use
  Var hCtl_download_UseLabel
  Var hCtl_download_CompileTools
  Var hCtl_download_NSIS
  Var hCtl_download_CheckBox1
  Var hCtl_download_SpellGroup
  Var hCtl_download_Font
  Var hCtl_download_Label4
  Var hCtl_download_Label5
  Var hCtl_download_Dict
  
  
  ; dialog create function
  Function fnc_download_Create
    
    ; === download (type: Dialog) ===
    nsDialogs::Create 1018
    Pop $hCtl_download
    ${If} $hCtl_download == error
      Abort
    ${EndIf}
    !insertmacro MUI_HEADER_TEXT "Select Components to Download" "These are optional components or additional components to download for EmacsPortable.App"
    
    ; === EmacsDownload (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 7u 131u 44u "Emacs Download"
    Pop $hCtl_download_EmacsDownload
  
    ReadIniStr $R1 "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" "Version"
    ${If} $R1 == ""
      ClearErrors
      ReadIniStr $R1 "$EXEDIR\App\ini\mirrors.ini" "emacs" "default.ver"
    ${EndIf}
    ; === DownloadVersion (type: DropList) ===
    ${NSD_CreateDropListSorted} 48u 17u 87u 12u "$R1"
    Pop $hCtl_download_DownloadVersion
    SetCtlColors $hCtl_download_DownloadVersion 0x000000 0xFFFFFF
    ${NSD_OnChange} $hCtl_download_DownloadVersion CheckMac
    
    ; === Label1 (type: Label) ===
    ${NSD_CreateLabel} 12u 19u 32u 13u "Version"
    Pop $hCtl_download_Label1
    
    ; === DownloadMac (type: Checkbox) ===
    ${NSD_CreateCheckbox} 12u 33u 123u 14u "Download Mac Binaries"
    Pop $hCtl_download_DownloadMac
    ${NSD_Check} $hCtl_download_DownloadMac
    
    SetOutPath "$TEMP\ep"
    File "unix-download.ini"  
    
    ; === VLine1 (type: VLine) ===
    ${NSD_CreateVLine} 143u 7u 1u 115u ""
    
    ; === Startup (type: GroupBox) ===
    ${NSD_CreateGroupBox} 148u 7u 139u 44u "Startup Script Download"
    Pop $hCtl_download_Startup
    
    ; === DropList1 (type: DropList) ===
    ${NSD_CreateDropListSorted} 179u 17u 104u 12u ""
    Pop $hCtl_download_Startup
    SetCtlColors $hCtl_download_Startup 0x000000 0xFFFFFF
    
    ; === Label2 (type: Label) ===
    ${NSD_CreateLabel} 152u 17u 23u 13u "Script"
    Pop $hCtl_download_Label2
    
    ; === GroupBox1 (type: GroupBox) ===
    ${NSD_CreateGroupBox} 148u 7u 139u 44u "Startup Script Download"
    Pop $hCtl_download_GroupBox1
    
    ; === Font (type: DropList) ===
    ${NSD_CreateDropListSorted} 179u 17u 104u 12u ""
    Pop $hCtl_download_Droplist
    SetCtlColors $hCtl_download_Droplist 0x000000 0xFFFFFF
    
    ; === Label3 (type: Label) ===
    ${NSD_CreateLabel} 152u 17u 23u 13u "Script"
    Pop $hCtl_download_Label3
    
    ; === Link2 (type: Link) ===
    ${NSD_CreateLink} 247u 35u 37u 13u "Add script"
    Pop $hCtl_download_Link2
    ${NSD_OnClick} $hCtl_download_Link2 AddStartup
    
    ; === Use (type: ComboBox) ===
    ${NSD_CreateComboBox} 179u 33u 64u 12u "Git"
    Pop $hCtl_download_Use
    SetCtlColors $hCtl_download_Use 0x000000 0xFFFFFF
    ${NSD_CB_AddString} $hCtl_download_Use "Git"
    ${NSD_CB_AddString} $hCtl_download_Use "Zip"
    ${NSD_CB_SelectString} $hCtl_download_Use "Git"
    
    ; === UseLabel (type: Label) ===
    ${NSD_CreateLabel} 152u 34u 23u 13u "Use"
    Pop $hCtl_download_UseLabel
    
    ; === CompileTools (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 54u 131u 24u "EmacsPortable.App Compile Tools"
    Pop $hCtl_download_CompileTools
    
    ; === NSIS (type: Checkbox) ===
    ${NSD_CreateCheckbox} 12u 64u 42u 14u "NSIS"
    Pop $hCtl_download_NSIS
    
    ; === CheckBox1 (type: Checkbox) ===
    ${NSD_CreateCheckbox} 58u 64u 56u 14u "AutoHotKey"
    Pop $hCtl_download_CheckBox1
    
    ; === SpellGroup (type: GroupBox) ===
    ${NSD_CreateGroupBox} 8u 82u 131u 41u "Fonts and Spelling Download"
    Pop $hCtl_download_SpellGroup
    
    ; === DropList3 (type: DropList) ===
    ${NSD_CreateDropListSorted} 47u 91u 88u 12u ""
    Pop $hCtl_download_Font
    SetCtlColors $hCtl_download_Font 0x000000 0xFFFFFF
    
    ; === Label4 (type: Label) ===
    ${NSD_CreateLabel} 14u 92u 20u 13u "Font"
    Pop $hCtl_download_Label4
    
    ; === Label5 (type: Label) ===
    ${NSD_CreateLabel} 14u 108u 39u 13u "Dictionary"
    Pop $hCtl_download_Label5
    
    ; === ComboBox1 (type: ComboBox) ===
    ${NSD_CreateDropListSorted} 58u 106u 77u 12u ""
    Pop $hCtl_download_Dict
    SetCtlColors $hCtl_download_Dict 0x000000 0xFFFFFF
    Call SetupFontDownload  
    Call SetupDownloadStartup
    Call SetupDownloadEmacs
    Call SetupDictDownload
  FunctionEnd
  
  
  ; dialog show function
  Function fnc_download_Show
    ${If} $option_download == "1"
      Call fnc_download_Create
      nsDialogs::Show $hCtl_download
    ${EndIf}
  FunctionEnd
  
#+END_SRC
*** Helper Functions

**** Setup Fonts Available for Download
#+BEGIN_SRC nsis
  Function SetupFontDownload
    EnumIni::Section "$EXEDIR\App\ini\fonts.ini" "fonts.download"
    Pop $R0
    ${If} $R0 != "error"
      ${ForEach} $R1 $R0 1 - 1
        Pop $R2
        ${NSD_CB_AddString} $hCtl_download_Font $R2
      ${Next}
    ${EndIf}
    ${NSD_CB_AddString} $hCtl_download_Font "(Select)"
    ${If} $download_font == ""
      ${NSD_CB_SelectString} $hCtl_download_Font "(Select)"
    ${EndIf}
  FunctionEnd
#+END_SRC

**** Setup Dictionaries Available for Download
#+BEGIN_SRC nsis
  Function SetupDictDownload
    EnumINI::SectionNames "$EXEDIR\App\ini\dicts.ini"
    Pop $R0
    ${If} $R0 != "error"
      ${ForEach} $R1 $R0 1 - 1
        Pop $R2
        ${NSD_CB_AddString} $hCtl_download_Dict $R2
      ${Next}
    ${EndIf}
    ${NSD_CB_AddString} $hCtl_download_Dict "(Select)"
    ${NSD_CB_SelectString} $hCtl_download_Dict "(Select)"
   FunctionEnd
  
#+END_SRC
**** Setup Functions for Emacs Version Available to Download
Emacs Versions Available for Download
#+BEGIN_SRC nsis
  Function SetupDownloadEmacs 
    EnumINI::SectionNames "$INSTDIR\App\ini\mirrors.ini"
    Pop $R0
    ${If} $R0 != "error"
      ${ForEach} $R1 $R0 1 - 1
        Pop $R2
        ${IfNot} $R2 == "emacs"
          ${NSD_CB_AddString} $hCtl_download_DownloadVersion $R2
        ${EndIf}
      ${Next}
    ${EndIf}
    ${NSD_CB_AddString} $hCtl_download_DownloadVersion "(Select)"
    ${NSD_CB_SelectString} $hCtl_download_DownloadVersion "(Select)"
  FunctionEnd
  
    
#+END_SRC

**** Setup Startup Scripts available for download
Startup scripts available for download.
#+BEGIN_SRC nsis
  Function SetupDownloadStartup
    EnumINI::SectionNames "$INSTDIR\App\ini\startup.ini"
    Pop $R0
    ${If} $R0 != "error"
      ${ForEach} $R1 $R0 1 - 1
        Pop $R2
        StrCpy $0 $R2 8
        ${If} $0 == "startup:"
          StrCpy $0 $R2 "" 8
          ${NSD_CB_AddString} $hCtl_download_Startup $0
        ${EndIf}
      ${Next}
    ${EndIf}
    ${NSD_CB_AddString} $hCtl_download_Startup "(Select)"
    ${NSD_CB_SelectString} $hCtl_download_Startup "(Select)"
  FunctionEnd
  
#+END_SRC
**** Are all the GnuWin32 Components available
#+BEGIN_SRC nsis
  Function enablegw32
    StrCpy $R9 "1"
    
    IfFileExists "$INSTDIR\App\ini\gw32.ini" +3
    StrCpy $R9 "0"
    Goto done
    
    EnumINI::Section "$INSTDIR\Data\ini\unix-download.ini" "gw32"
    Pop $R0
    StrCmp $R0 "error" done
    ${While} $R0 > 0
      Pop $R1
       ##MessageBox MB_OK "$R1, $R0, $R2, $R9!"
      StrCmp $R9 "0" next
      
      ReadINIStr $R2 "$INSTDIR\Data\ini\unix-download.ini" "assoc" "$R1"
      StrCmp "$R2" "1" 0 next
       ##MessageBox MB_OK "$R1, $R0, $R2, $R9!"
      EnumINI::SectionExist "$INSTDIR\App\ini\gw32.ini" "$R1.bin"
      Pop $R2
      ##MessageBox MB_OK "$R1, $R0, $R2, $R9!"
      StrCmp "$R2" "1" 0 not_installed
      EnumINI::Section "$INSTDIR\App\ini\gw32.ini" "$R1.bin"
      Pop $R2
      StrCmp "$R2" "error" not_installed
      ${While} $R2 > 0
        Pop $R3
        ##MessageBox MB_OK "$R2, $INSTDIR\App\gw32\$R3, $R9!"
        StrCmp $R9 "0" next_check
        IfFileExists "$INSTDIR\App\gw32\$R3" next_check
        StrCpy $R9 "0"
        next_check:
          IntOp $R2 $R2 - 1
      ${EndWhile}
      Goto next
      not_installed:
        StrCpy $R9 "0"
      next:
        IntOp $R0 $R0 - 1
    ${EndWhile}  
    done:
      MessageBox MB_OK "R9: $R9"
      ClearErrors
      ${If} $R9 == '0'
        EnableWindow $hCtl_download_GnuWin32Utils 0
        ${NSD_Check} $hCtl_download_GnuWin32Utils
      ${Else}
        EnableWindow $hCtl_download_GnuWin32Utils 1
      ${EndIf}
  FunctionEnd
  
#+END_SRC

**** Select Unix Utilities to Add
#+BEGIN_SRC nsis
  Function SelectUnixComponents
    SetOutPath "$INSTDIR\App\eps"
    ExecWait "$INSTDIR\App\eps\download-unix.exe"
    Call enablegw32
  FunctionEnd
#+END_SRC
**** Check to see if Mac Binaries are available
#+BEGIN_SRC nsis
   Function CheckMac
     
   FunctionEnd   
#+END_SRC
**** Add a startup script
#+BEGIN_SRC nsis
Function AddStartup
FunctionEnd
#+END_SRC
*** Leave Download Page
#+BEGIN_SRC nsis
  Function fnc_download_Validate
    ${NSD_GetText}  $hCtl_download_DownloadVersion $download_emacs_version
    ${NSD_GetState}  $hCtl_download_DownloadMac $download_mac
    ${NSD_GetText}  $hCtl_download_Font $download_font
    ${NSD_GetText} $hCtl_download_Startup $download_startup
    ${NSD_GetText} $hCtl_download_Use $download_use
    ${NSD_GetText}  $hCtl_download_Dict $download_dict
  FunctionEnd
#+END_SRC
*** Download Functions
**** Download Emacs
#+BEGIN_SRC nsis
  Function downloadEmacs
    ${If} $download_emacs_version != "(Select)" 
      DetailPrint "Attempting to Download Emacs $download_emacs_version"
      IfFileExists "$INSTDIR\App\emacs-$download_emacs_version" 0 +3
      DetailPrint "Emacs $download_emacs_version already exists, not downloading again."
      Goto download_mac
      download_pc:
        Call getWin
      download_mac:
        StrCmp "$download_mac" "1" 0 skip_mac
        IfFileExists "$INSTDIR\App\emacs-$download_emacs_version\MacOS" 0 +3
        DetailPrint "Emacs $download_emacs_version  Mac files already exist, not downloading again."
        Goto skip_mac
        Call getMac
      skip_mac:
        ClearErrors
    ${EndIf}
  FunctionEnd
  Function getWin
    ${getEmacsWin} "$download_emacs_version"
  FunctionEnd
  Function getMac
    ${getEmacsMac} "$download_emacs_version"
  FunctionEnd
#+END_SRC
**** Download Function
#+BEGIN_SRC nsis
Function DownloadFiles
  Call downloadEmacs
FunctionEnd
#+END_SRC

* Single section for installing
#+BEGIN_SRC nsis
  Section "Components"
    ${IfNot} $cpdir  == ""
      SetOutPath "$cpdir"
      CopyFiles /SILENT "$EXEDIR\$EXEFILE" "$cpdir\EmacsOptions.exe"
      Exec '"$cpdir\EmacsOptions.exe" /install'
      SetAutoClose true
    ${Else}
      ${If} $option_build == ""
        ${If} ${FileExists} "$EPEXE\App\ini\mirrors.ini"
          ${IfNot} ${FileExists} "$EPEXE\App\7z\7zG.exe"
            SetOutPath "$EPEXE\App\7z"
            File "..\..\..\App\7z\7zG.exe"
            File "..\..\..\App\7z\7z.*"
            File "..\..\..\App\7z\License.txt"
          ${EndIf}
          ${SetEnv}
          ${SetupProxy}
          
          ${If} $option_assoc == "1"
            md5dll::GetMD5File "$EPEXE\Data\ini\assoc.ini"
            Pop $R0
            ${If} "$R0" != $assoc_md5
              Call RemoveAssoc
              Call RestoreAssoc
              ExecWait "$EXEDIR\EmacsPortableApp.exe --batch --load $EXEDIR\App\MacOS\build-pilst.el -f build-app-info"
            ${EndIf}
          ${EndIf}
          
          ${If} $option_proxy == "1"
            IfFileExists "$EXEDIR\EmacsPortableApp.exe" app_exists noapp
            app_exists:
              ExecWait '"$EXEDIR\EmacsPortableApp.exe" /UPDATEPROXY'
            noapp:
              ClearErrors
          ${EndIf}
          
          ${If} $option_download == "1"
            Call downloadEmacs
            ${If} $download_startup != "(Select)"
              DetailPrint "Attempting to Download $download_startup"
              ReadINIStr $R0 "$EXEDIR\App\ini\startup.ini" "startup:$download_startup" "url"
              StrCpy $R1 $R0 10 8
              DetailPrint "Checking for github #1, $R0, $R1"
              ## Handle github repositories
              ${IfNot} $R1 == "github.com"
                StrCpy $R1 $R0 10 7
                DetailPrint "Checking for github #2, $R1"
              ${EndIf}
              ${If} $R1 == "github.com"
                StrCpy $R1 $R0 "" -1
                ${If} $R1 == "/" # Take off trailing /
                  StrCpy $R0 $R0 -1
                ${EndIf}
                ${If} $download_use == "Git"
                  Detailprint "github repository: $R0.git"
                  ${If} ${FileExists} "$EXEDIR\Data\start\$download_startup\.git"
                    SetOutPath "$EXEDIR\Data\start\$download_startup"
                    Detailprint "git pull"
                    ExecWait 'cmd /c "git pull"'
                  ${Else}
                    ${If} ${FileExists} "$EXEDIR\Data\start\$download_startup"
                      RmDir /r "$EXEDIR\Data\start\$download_startup"
                    ${EndIf}
                    SetOutPath "$EXEDIR\Data\start"
                    ExecWait 'cmd /c "git clone $R0.git $EXEDIR\Data\start\$download_startup --depth 1"'
                  ${EndIf}
                ${ElseIf} $download_use == "Zip"
                  Detailprint "github repository: $R0/zipball/master"
                  SetOutPath "$TEMP\ep\start"
                  Inetc::get "$R0/zipball/master" "$TEMP\ep\start\start.zip"
                  ExecWait '"$EXEDIR\App\7z\7zG.exe" x -y "$TEMP\ep\start\start.zip" -o$TEMP\ep\start'
                  Delete "$TEMP\ep\start\start.zip"
                  FindFirst $0 $1 $TEMP\ep\start\*.*
                  loop_start:
                    StrCmp $1 "" done_start
                    StrCmp $1 "." next_start
                    StrCmp $1 ".." next_start
                    DetailPrint $1
                    StrCpy $R1 $1
                  next_start:
                    FindNext $0 $1
                    Goto loop_start
                  done_start:
                    FindClose $0
                    RmDir /r "$EXEDIR\Data\start\$download_startup"
                    SetOutPath $EXEDIR\Data\start\$download_startup
                    CopyFiles /SILENT "$TEMP\ep\start\$R1\*.*" "$EXEDIR\Data\start\$download_startup"
                    RmDir /r "$TEMP\ep\start"
                ${EndIf}
              ${Else}
                StrCpy $R1 $R0 "" -4
                DetailPrint "Checking for zip/git, $R0, $R1"
                ${If} $R1 == ".zip"
                  Detailprint "zip file: $R0"
                  SetOutPath "$TEMP\ep\start"
                  Inetc::get "$R0" "$TEMP\ep\start\start.zip"
                  ExecWait '"$EXEDIR\App\7z\7zG.exe" x -y "$TEMP\ep\start\start.zip" -o$TEMP\ep\start'
                  Delete "$TEMP\ep\start\start.zip"
                  FindFirst $0 $1 $TEMP\ep\start\*.*
                  StrCpy $R1 ""
                  StrCpy $R2 ""
                  loop_start_zip:
                    StrCmp $1 "" done_start_zip
                    StrCmp $1 "." next_start_zip
                    StrCmp $1 ".." next_start_zip
                    DetailPrint $1
                    ${IfNot} $R1 == ""
                      StrCpy $R2 "multiple files"
                    ${EndIf}
                    StrCpy $R1 $1
                  next_start_zip:
                    FindNext $0 $1
                    Goto loop_start_zip
                  done_start_zip:
                    FindClose $0
                    RmDir /r "$EXEDIR\Data\start\$download_startup"
                    SetOutPath $EXEDIR\Data\start\$download_startup
                    ${If} $R2 == ""
                      ## Single Directory
                      CopyFiles /SILENT "$TEMP\ep\start\$R1\*.*" "$EXEDIR\Data\start\$download_startup"
                    ${Else}
                      CopyFiles /SILENT "$TEMP\ep\start\*.*" "$EXEDIR\Data\start\$download_startup"
                    ${EndIf}
                    RmDir /r "$TEMP\ep\start"
                ${ElseIf} $R1 == ".git"
                  ${If} ${FileExists} "$EXEDIR\Data\start\$download_startup\.git"
                    SetOutPath "$EXEDIR\Data\start\$download_startup"
                    Detailprint "git pull"
                    ExecWait 'cmd /c "git pull"'
                  ${Else}
                    ${If} ${FileExists} "$EXEDIR\Data\start\$download_startup"
                      RmDir /r "$EXEDIR\Data\start\$download_startup"
                    ${EndIf}
                    SetOutPath "$EXEDIR\Data\start"
                    ExecWait 'cmd /c "git clone $R0 $EXEDIR\Data\start\$download_startup --depth 1"'
                  ${EndIf}
                ${Else}
                  DetailPrint "Assume this is a single file, like a .emacs file."
                  
                  RmDir /r "$EXEDIR\Data\start\$download_startup"
                  SetOutPath "$EXEDIR\Data\start"
                  ${Explode} $0 "/" "$R0"
                  ${For} $1 1 $0
                    Pop $2
                  ${Next}
                  Inetc::get "$R0" "$EXEDIR\Data\start\$download_startup\$2"
                ${EndIf}
              ${EndIf}
            ${EndIf}
            
            ${If} $download_dict != "(Select)"
              DetailPrint "Attempting to download dictionary $download_dict"
              ReadINIStr $R0 "$EXEDIR\App\ini\dicts.ini" "$download_dict" "url"
              DetailPrint "URL: $R0"
              ClearErrors
              ${If} $R0 != ""
                inetc::get  $R0 "$TEMP\ep\dict.zip"
                SetOutPath "$EPEXE\App\hunspell\epdic"
                ExecWait '"$EXEDIR\App\7z\7zG.exe" e -y "$TEMP\ep\dict.zip" -o$EPEXE\App\hunspell\epdic'
                Delete "$TEMP\ep\dict.zip"
              ${EndIf}
            ${EndIf}
            ${If} $download_font != "(Select)"
              DetailPrint "Attempting To Download $download_font"
              ReadINIStr $R0 "$EXEDIR\App\ini\fonts.ini" "fonts.download" "$download_font"
              DetailPrint "URL: $R0"
              ClearErrors
              ${If} $R0 != ""
                StrCpy $R1 $R0 "" -3
                ${If} $R1 == "zip"
                  DetailPrint "Zip"
                  SetOutPath "$TEMP\ep"
                  inetc::get  $R0 "$TEMP\ep\font.zip"
                  SetOutPath "$EXEDIR\App\fonts"
                  ExecWait '"$EXEDIR\App\7z\7zG.exe" e -y "$TEMP\ep\font.zip" -o$EXEDIR\App\fonts'
                  Delete "$TEMP\ep\font.zip"
                ${Else}
                  DetailPrint "Raw"
                  Push $R0
                  ${Explode} $R1 "/" $R0
                  ${If} $R1 != "0"
                    Pop $R2
                    IntOp $R1 $R1 - 1
                    ${For} $1 1 $R1
                      Pop $R2
                    ${Next}
                    Pop $R0
                    DetailPrint "URL: $R0"
                    DetailPrint "Should save to $EXEDIR\App\fonts\$R2"
                    inetc::get $R0 "$EXEDIR\App\fonts\$R2"
                  ${EndIf}
                ${EndIf}
                ## Clean Up Font Directory
                StrCpy $3 ""
                FindFirst $0 $1 $EXEDIR\App\fonts\*.*
                loop_fonts:
                  StrCmp $1 "" done_fonts
                  StrCpy $2 $1 "" -4
                  ${IfNot} $2 == ".fon"
                  ${AndIfNot} $2 == ".fnt"
                  ${AndIfNot} $2 == ".ttf"
                  ${AndIfNot} $2 == ".ttc"
                  ${AndIfNot} $2 == ".fot"
                  ${AndIfNot} $2 == ".otf"
                  ${AndIfNot} $2 == ".mmm"
                  ${AndIfNot} $2 == ".pfb"
                  ${AndIfNot} $2 == ".pfm"
                    ${If} ${DirExists} $1
                      RmDir /r $1
                    ${Else}
                      Delete $1
                    ${EndIf}
                  ${EndIf}
                  FindNext $0 $1
                  Goto loop_fonts
                done_fonts:
                  ClearErrors
                  ${If} $3 == ""
                    FindFirst $0 $1 $EXEDIR\App\fonts\*
                    StrCpy $3 "1"
                    Goto  loop_fonts
                  ${EndIf}
              ${EndIf}
            ${EndIf}
            
            WriteIniStr "$EXEDIR\Data\ini\EmacsPortableApp.ini" "EmacsPortableApp" \
                "Version" "$download_emacs_version"
            ${If} ${FileExists} "$EXEDIR\EmacsPortableApp.exe"
              ExecWait "$EXEDIR\EmacsPortableApp.exe --batch --load $EXEDIR\App\MacOS\build-pilst.el -f build-app-info"
            ${Else}
              Exec "$EXEDIR\EmacsOptions.exe"
              SetAutoClose true
            ${EndIf}
          ${EndIf}
        ${Else}
          ${IfNot} ${FileExists} "$EXEDIR\App\7z\7zG.exe"
            SetOutPath "$EXEDIR\App\7z"
            File "..\..\..\App\7z\7zG.exe"
            File "..\..\..\App\7z\7z.*"
            File "..\..\..\App\7z\License.txt"
          ${EndIf}
          ## mirrors.ini not found.  Download EmacsPortableApp
          SetOutPath "$EXEDIR\App\ahk"
          SetOutPath "$TEMP\ep\ep"
          Inetc::get "https://github.com/mlf176f2/EmacsPortable.App/zipball/master" "$TEMP\ep\ep\epa.zip"
          ExecWait '"$EXEDIR\App\7z\7zG.exe" x -y "$TEMP\ep\ep\epa.zip" -o"$TEMP\ep\ep"'
          Delete "$TEMP\ep\ep\epa.zip"
          FindFirst $0 $1 $TEMP\ep\ep\*.*
          loop_epa:
            StrCmp $1 "" done_epa
            StrCmp $1 "." next_epa
            StrCmp $1 ".." next_epa
            DetailPrint $1
            StrCpy $R1 $1
          next_epa:
            FindNext $0 $1
            Goto loop_epa
          done_epa:
            FindClose $0
            CopyFiles /SILENT "$TEMP\ep\ep\$R1\*.*" "$EXEDIR\"
            RmDir /r "$TEMP\ep\ep"
            SetOutPath "$TEMP\ep\ep"
            ${IfNot} ${FileExists} "$EPEXE\App\hunspell\bin\hunspell.exe"
              ReadINIStr $0 "$EXEDIR\App\ini\apps.ini" hunspell url
              ClearErrors
              ${If} $0 != ""
                SetOutPath $TEMP\ep
                Inetc::get "$0" "$TEMP\ep\hunspell.zip"
                SetOutPath "$EXEDIR\App\hunspell\bin"
                ExecWait '"$EXEDIR\App\7z\7zG.exe" e -y "$TEMP\ep\hunspell.zip" -o"$EXEDIR\App\hunspell\bin"'
                SetOutPath "$EXEDIR\App\hunspell\epdic"
                CopyFiles /SILENT "$EXEDIR\App\hunspell\bin\en_us*.*" "$EXEDIR\App\hunspell\epdic"
                Delete "$EXEDIR\App\hunspell\bin\en_us*.*"
              ${EndIf}
            ${EndIf}
            
            
            ${IfNot} ${FileExists} "$EXEDIR\App\ahk\App\AutoHotKey\Compiler\Ahk2Exe.exe"
              ReadINIStr $0 "$EXEDIR\App\ini\apps.ini" ahk url
              ClearErrors
              ${If} $0 != ""
                Inetc::get "$0" "$TEMP\ep\ep\ahk.7z"
                ExecWait '"$EXEDIR\App\7z\7zG.exe" x -y "$TEMP\ep\ep\ahk.7z" -o"$EXEDIR\App\ahk"'
                Delete "$TEMP\ep\ep\ahk.7z"
              ${EndIf}
            ${EndIf}
            
            ${IfNot} ${FileExists} "$EXEDIR\App\NSIS\makensis.exe"
              ReadINIStr $0 "$EXEDIR\App\ini\apps.ini" nsis url
              ClearErrors
              ${If} $0 != ""
                Inetc::get "$0" "$TEMP\ep\ep\NSIS.zip"
                ExecWait '"$EXEDIR\App\7z\7zG.exe" x -y "$TEMP\ep\ep\NSIS.zip" -o"$EXEDIR\App"'
                Delete "$TEMP\ep\ep\NSIS.zip"
              ${EndIf}
            ${EndIf}
            ## Add Make.exe
            SetOutPath "$EXEDIR\App\gw32\share\locale\zh_CN\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\zh_CN\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\zh_CN\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\vi\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\vi\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\vi\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\uk\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\uk\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\uk\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\tr\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\tr\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\tr\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\sv\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\sv\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\sv\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\rw\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\rw\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\rw\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\ru\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\ru\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\ru\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\pt_BR\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\pt_BR\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\pt_BR\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\pl\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\pl\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\pl\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\nl\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\nl\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\nl\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\ko\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\ko\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\ko\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\ja\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\ja\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\ja\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\id\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\id\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\id\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\hr\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\hr\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\hr\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\he\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\he\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\he\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\gl\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\gl\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\gl\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\ga\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\ga\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\ga\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\fr\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\fr\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\fr\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\fi\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\fi\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\fi\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\es\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\es\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\es\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\de\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\de\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\de\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\da\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\da\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\da\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\share\locale\be\LC_MESSAGES"
            File "..\..\..\App\gw32\share\locale\be\LC_MESSAGES\make.mo"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "share\locale\be\LC_MESSAGES\make.mo" "1"
            SetOutPath "$EXEDIR\App\gw32\manifest"
            File "..\..\..\App\gw32\manifest\make-3.81-bin.mft"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "manifest\make-3.81-bin.mft" "1"
            SetOutPath "$EXEDIR\App\gw32\manifest"
            File "..\..\..\App\gw32\manifest\make-3.81-bin.ver"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "manifest\make-3.81-bin.ver" "1"
            SetOutPath "$EXEDIR\App\gw32\man\cat1"
            File "..\..\..\App\gw32\man\cat1\make.1.txt"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "man\cat1\make.1.txt" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-GnuWin32.README"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-GnuWin32.README" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\ABOUT-NLS"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\ABOUT-NLS" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\AUTHORS"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\AUTHORS" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\ChangeLog"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\ChangeLog" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\COPYING"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\COPYING" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\INSTALL"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\INSTALL" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\NEWS"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\NEWS" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\README"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\README" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\tests"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\tests\ChangeLog"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\tests\ChangeLog" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\tests"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\tests\COPYING"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\tests\COPYING" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\tests"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\tests\NEWS"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\tests\NEWS" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\tests"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\tests\README"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\tests\README" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\tests\scripts\functions"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\tests\scripts\functions\warning"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\tests\scripts\functions\warning" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\po"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\po\ChangeLog"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\po\ChangeLog" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\glob"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\glob\ChangeLog"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\glob\ChangeLog" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81-src\config"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81-src\config\ChangeLog"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81-src\config\ChangeLog" "1"
            SetOutPath "$EXEDIR\App\gw32\contrib\make\3.81\make-3.81"
            File "..\..\..\App\gw32\contrib\make\3.81\make-3.81\check.log"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "contrib\make\3.81\make-3.81\check.log" "1"
            SetOutPath "$EXEDIR\App\gw32\bin"
            File "..\..\..\App\gw32\bin\make.exe"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.bin" "bin\make.exe" "1"
            
            SetOutPath "$EXEDIR\App\gw32\manifest"
            File "..\..\..\App\gw32\manifest\make-3.81-dep.mft"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.dep" "manifest\make-3.81-dep.mft" "1"
            SetOutPath "$EXEDIR\App\gw32\manifest"
            File "..\..\..\App\gw32\manifest\make-3.81-dep.ver"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.dep" "manifest\make-3.81-dep.ver" "1"
            SetOutPath "$EXEDIR\App\gw32\bin"
            File "..\..\..\App\gw32\bin\libiconv2.dll"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.dep" "bin\libiconv2.dll" "1"
            SetOutPath "$EXEDIR\App\gw32\bin"
            File "..\..\..\App\gw32\bin\libintl3.dll"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "make.dep" "bin\libintl3.dll" "1"
            
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "manifest\make-3.81-dep.mft" "make" "1"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "manifest\make-3.81-dep.ver" "make" "1"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "bin\libiconv2.dll" "make" "1"
            WriteIniStr "$EXEDIR\App\ini\gw32.ini" "bin\libintl3.dll" "make" "1"
            
            Exec "$EXEDIR\EmacsOptions.exe"
            SetAutoClose true
        ${EndIf}
      ${ElseIf} $EXEFILE == "EmacsBuild.exe"
        StrCpy $option_build ""
        Delete "$EXEDIR\EmacsOptions.ene"
        ${IfNot} ${FileExists} "$EXEDIR\EmacsPortableApp.exe"
          StrCpy $option_build "1"
        ${EndIf}
        ${PathIfExist} "$EXEDIR\App\ahk\App\AutoHotkey\Compiler"
        FindFirst $0 $1 $EXEDIR\App\emacs-*.*
        loop_emacs_build:
          StrCmp $1 "" done_emacs_build
          StrCpy $2 $1
          FindNext $0 $1
          Goto loop_emacs_build
        done_emacs_build:
          ExecWait 'cmd /c "cd $EXEDIR\Other\source\ahk && make all"'
          ExecWait 'cmd /c "cd $EXEDIR\Other\source\nsi && $EXEDIR\App\gw32\bin\make.exe all EMACS=""$EXEDIR\App\$2\bin\emacs.exe"" MAKENSIS=""$EXEDIR\App\NSIS\makensis.exe"""'
          ${If} $option_build == "1"
            Exec "$EXEDIR\App\eps\download-unix.exe"
          ${EndIf}
          SetAutoClose true
      ${Else}
        Exec "$EXEDIR\EmacsBuild.exe"
        SetAutoClose true
      ${EndIf}
    ${EndIf}
  SectionEnd
  
#+END_SRC  


