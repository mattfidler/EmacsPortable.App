#+TITLE: EmacsPortable.App Compile Tools
#+AUTHOR: Matthew L. Fidler
#+PROPERTY: tangle EmacsCompileTools.nsi
* Introduction
This downloads everything needed to compile EmacsPortable.App windows
executables.
* Shared Code
** Sections
#+BEGIN_SRC nsis
  SectionGroup "EmacsPortable.App Build Tools" sec_emacsportable_app_build_tools 
    ; Description:
    ; Tools needed to build EmacsPortable.App
    Section /o "AutoHotKey Portable" sec_autohotkey_portable ; Unchecked (/o)
      ; Description:
      ; Portable Autohotkey, used to implement daemon
      ${installPA} "ahk"
    SectionEnd ; sec_autohotkey_portable
    
    
    Section /o "Org-mode" sec_ct1 ; Unchecked (/o)
      ; Description:
      ; Org mode is required to build EmacsPortable.App since the sorce code is in org files
      ${DOWN} "org" "$EXEDIR\App\lisp\src"
  
    SectionEnd ; sec_ct1
  
    Section /o "EmacsPortable.App Starter Kit" sec_emacsportable_app_starter_kit ; Unchecked (/o)
      ; Description:
      ; A Starter kit based on Eric Shulte's Starter kit modified for directory paths.
      ${DOWN} "sk" "$EXEDIR\App"
    SectionEnd ; sec_emacsportable_app_starter_kit
    
    SectionGroup "Required Gnu32 Utilities" sec_required_gnu32_utilities ; Collapsed
      ; Description:
      ; Required Gnu32 Utilities
      Section /o "Make" sec_make ; Checked
        ; Description:
        ; Gnu Make to geneate executables from soruce files
        !insertmacro g32down "make"
      SectionEnd ; sec_make
      
    SectionGroupEnd ; sec_required_gnu32_utilities  
    
    
    SectionGroup "NSIS Portable Components" sec_nsis_portable_components ; Collapsed
      ; Description:
      ; Downloads and installs NSIS Portable and the components needed to make EmacsPortable.App
      Section /o "NSIS Portable " sec_nsis_portable_ansi ; Unchecked (/o)
        ; Description:
        ; Download the  version of NSIS portable
        ${installPA} "nsis"
      SectionEnd ; sec_nsis_portable_ansi
      Section /o "7Zip Plugin" sec_7zip_plugin ; Unchecked (/o)
        ; Description:
        ; 7Zip Plugin
        ReadINIStr $R0 "${mirror}" "nsis:7z" "url"
        inetc::get $R0 "$TEMP\7z.zip"
        ZipDLL::extractfile "$TEMP\7z.zip" "$PA\NSISPortableANSI\App\NSIS\Plugins" "nsis7z.dll"
        Delete "$TEMP\7z.zip"
      SectionEnd ; sec_7zip_plugin
      Section /o "Blowfish Plugin" sec_blowfish_plugin ; Unchecked (/o)
        ; Description:
        ; Blowfish plugin used to unsecurly encrypt the proxy password
        ReadINIStr $R0 "${mirror}" "nsis:blowfish" "url"
        inetc::get $R0 "$TEMP\blowfish.zip"
        ZipDLL::extractfile "$TEMP\blowfish.zip" "$PA\NSISPortableANSI\App\NSIS\Plugins" "blowfish.dll"
        Delete "$TEMP\blowfish.zip"
      SectionEnd ; sec_blowfish_plugin
      Section /o "EnumINI" sec_enumini ; Checked
        ; Description:
        ; Enumerates INI keys
        !insertmacro getPluginFull "enumINI"
      SectionEnd ; sec_enumini
      Section /o "ExecDos" sec_execdos ; Unchecked (/o)
        ; Description:
        ; Allows dos-based programs that open a terminal and then open a GUI to just show the gui.
        !insertmacro getPluginFull "execdos"
      SectionEnd ; sec_execdos
      Section /o "Inetc" sec_inetc ; Unchecked (/o)
        ; Description:
        ; Plugin to allow downloading of Files over the internet
        !insertmacro getPluginFull "inetc"
      SectionEnd ; sec_inetc
      Section /o "IpConfig" sec_ipconfig ; Unchecked (/o)
        ; Description:
        ; IP Config get connection information, allowing proxy settings to be saved for each connection type
        !insertmacro getPluginFull "ipconfig"
      SectionEnd ; sec_ipconfig
      Section /o "Loading Bar UI" sec_loading_bar_ui ; Unchecked (/o)
        ; Description:
        ; Emacs Loading Bar support
        StrCmp "$PA" "" 0 download
        ${GetDrives} "FDD+HDD" "GetDriveVars"
        StrCmp "$PA" "" 0 download
        MessageBox MB_OK "Cannot Install Loading Bar UI Plugin; Can't determine PortableApps Location."
        download:
          ReadINIStr $R0 "${mirror}" "nsis:loadingbarui" "url"
          inetc::get $R0 "$TEMP\lb.zip"
          ZipDLL::extractfile "$TEMP\lb.zip" "$PA\NSISPortableANSI\App\NSIS\Contrib\UIs" "LoadingBar.exe"
          ZipDLL::extractfile "$TEMP\lb.zip" "$PA\NSISPortableANSI\App\NSIS\Contrib\UIs" "LoadingBar_Icon.exe"
          ZipDLL::extractfile "$TEMP\lb.zip" "$PA\NSISPortableANSI\App\NSIS\Contrib\UIs" "LoadingBar_NoDesc.exe"
          Delete "$TEMP\lb.zip"
        end:      
        SectionEnd ; sec_loading_bar_ui
        Section /o "ZipDLL" sec_zipdll ; Unchecked (/o)
          ; Description:
          ; Plugin to allow zip file extraction
          StrCmp "$PA" "" 0 download
          ${GetDrives} "FDD+HDD" "GetDriveVars"
          StrCmp "$PA" "" 0 download
          MessageBox MB_OK "Cannot Install Loading Bar UI Plugin; Can't determine PortableApps Location."
          download:
            ReadINIStr $R0 "${mirror}" "nsis:zipdll" "url"
            inetc::get $R0 "$TEMP\z.zip"
            ZipDLL::extractfile "$TEMP\z.zip" "$PA\NSISPortableANSI\App\NSIS\Plugins" "ZipDLL.dll"
            ZipDLL::extractfile "$TEMP\z.zip" "$PA\NSISPortableANSI\App\NSIS\Include" "zipdll.nsh"
            Delete "$TEMP\z.zip"
          end: 
          SectionEnd ; sec_zipdll
    SectionGroupEnd ; sec_nsis_portable_components
  SectionGroupEnd ; sec_emacsportable_app_build_tools
  ;--------------------------------
  ;Description(s)
  LangString DESC_sec_nsis_portable_components ${LANG_ENGLISH} "Downloads and installs NSIS Portable and the components needed to make EmacsPortable.App"  
  LangString DESC_sec_emacsportable_app_starter_kit ${LANG_ENGLISH} "A Starter kit based on Eric Shulte's Starter kit modified for directory paths."
  LangString DESC_sec_make ${LANG_ENGLISH} "Gnu Make to geneate executables from soruce files"
  LangString DESC_sec_required_gnu32_utilities ${LANG_ENGLISH} "Required Gnu32 Utilities"
  LangString DESC_sec_ct1 ${LANG_ENGLISH} "Org mode is required to build EmacsPortable.App since the sorce code is in org files"
  
  
  LangString DESC_sec_enumini ${LANG_ENGLISH} "Enumerates INI keys"
  LangString DESC_sec_execdos ${LANG_ENGLISH} "Allows dos-based programs that open a terminal and then open a GUI to just show the gui."
  LangString DESC_sec_7zip_plugin ${LANG_ENGLISH} "7Zip Plugin"
  LangString DESC_sec_blowfish_plugin ${LANG_ENGLISH} "Blowfish plugin used to unsecurly encrypt the proxy password"
  LangString DESC_sec_autohotkey_portable ${LANG_ENGLISH} "Portable Autohotkey, used to implement daemon"
  LangString DESC_sec_emacsportable_app_build_tools ${LANG_ENGLISH} "Tools needed to build EmacsPortable.App"
  LangString DESC_sec_ipconfig ${LANG_ENGLISH} "IP Config get connection information, allowing proxy settings to be saved for each connection type"
  LangString DESC_sec_loading_bar_ui ${LANG_ENGLISH} "Emacs Loading Bar support"
  LangString DESC_sec_zipdll ${LANG_ENGLISH} "Plugin to allow zip file extraction"
  LangString DESC_sec_inetc ${LANG_ENGLISH} "Plugin to allow downloading of Files over the internet"
  LangString DESC_sec_nsis_portable_ansi ${LANG_ENGLISH} "Download the  version of NSIS portable"
  
  !define NSIS_DESC `!insertmacro NSIS_DESC`
  !macro NSIS_DESC
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_ipconfig} $(DESC_sec_ipconfig)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_loading_bar_ui} $(DESC_sec_loading_bar_ui)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_zipdll} $(DESC_sec_zipdll)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_inetc} $(DESC_sec_inetc)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_nsis_portable_ansi} $(DESC_sec_nsis_portable_ansi)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_nsis_portable_components} $(DESC_sec_nsis_portable_components)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_emacsportable_app_build_tools} $(DESC_sec_emacsportable_app_build_tools)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_autohotkey_portable} $(DESC_sec_autohotkey_portable)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_blowfish_plugin} $(DESC_sec_blowfish_plugin)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_7zip_plugin} $(DESC_sec_7zip_plugin)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_execdos} $(DESC_sec_execdos)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_enumini} $(DESC_sec_enumini)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_ct1} $(DESC_sec_ct1)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_required_gnu32_utilities} $(DESC_sec_required_gnu32_utilities)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_make} $(DESC_sec_make)
    !insertmacro MUI_DESCRIPTION_TEXT ${sec_emacsportable_app_starter_kit} $(DESC_sec_emacsportable_app_starter_kit)
  !macroend
  
    
    
#+END_SRC

** Initialization Macro
#+BEGIN_SRC nsis
  !macro REQ_INI
    ${g32installed} "make" ${sec_make}
    ${setInstallIfExists} "$PA\NSISPortableANSI\NSISPortableANSI.exe" ${sec_nsis_portable_ansi}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\inetc.dll" ${sec_inetc}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\IpConfig.dll" ${sec_ipconfig}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Contrib\UIs\LoadingBar_Icon.exe" ${sec_loading_bar_ui}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\ZipDLL.dll" ${sec_zipdll}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\blowfish.dll" ${sec_blowfish_plugin}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\EnumINI.dll" ${sec_enumini}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\ExecDos.dll" ${sec_execdos}
    ${setInstallIfExists} "$PA\NSISPortableANSI\App\NSIS\Plugins\nsis7z.dll" ${sec_7zip_plugin}
    ${setInstallIfExists} "$PA\AutoHotKeyPortable\AHKCompilerPortable.exe" ${sec_autohotkey_portable}
    ${ifSecNotRO} ${sec_make} skip_gnu32_util
    ${setInstallGroup} ${sec_required_gnu32_utilities}
    skip_gnu32_util:    
      ${ifSecNotRO} ${sec_nsis_portable_ansi} skip_nsis_group_ro 
      ${ifSecNotRO} ${sec_inetc} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_ipconfig} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_loading_bar_ui} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_zipdll} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_blowfish_plugin} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_enumini} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_7zip_plugin} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_execdos} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_ct1} skip_nsis_group_ro
      ${ifSecNotRO} ${sec_required_gnu32_utilities} skip_nsis_group_ro
      ${setInstallGroup} ${sec_nsis_portable_components}
    skip_build_tools:
      ${ifSecNotRO} ${sec_nsis_portable_components} skip_build_tools 
      ${ifSecNotRO} ${sec_autohotkey_portable} skip_build_tools
      
      ${setInstallGroup} ${sec_emacsportable_app_build_tools}
    skip_nsis_group_ro:
      ClearErrors
  !macroend
  
#+END_SRC




** Compile EmacsPortable.App
This will allow a compile of EmacsPortable.App, assuming:
 - Make is located in =App\gw32\bin\make.exe=
 - Autohotkey Compiler is in
   =$PA\AutoHotKeyPortable\App\AutoHotkey\Compiler=
 - NSIS Portable Compiler is in =$PA\NSISPortableANSI\App\NSIS=
#+BEGIN_SRC nsis
  Function compileEmacsPortableApp
    ${PathIfExist} "$INSTDIR\App\gw32\bin"
    ${PathIfExist} "$PA\AutoHotKeyPortable\App\AutoHotkey\Compiler"
    ${PathIfExist} "$PA\NSISPortableANSI\App\NSIS"
    SetOutPath "$INSTDIR\App\eps"
    StrCpy $R1 ""
    ${Locate} "$INSTDIR\App" "/L=D /M=emacs-* /S= /G=0" "SetEmacs"
    StrCmp $R1 "" 0 +3
    MessageBox MB_OK "Could not Locate Emacs."
    Goto end
    ${PathIfExist} "$R1"
    
    ExecWait "cmd /c $\"cd $INSTDIR\Other\source\ahk & make clean"
    ExecWait "cmd /c $\"cd $INSTDIR\Other\source\ahk & make"
    ExecWait "cmd /c $\"cd $INSTDIR\Other\source\nsi & make clean"
    ExecWait "cmd /c $\"cd $INSTDIR\Other\source\nsi & make" 
    end:
      ClearErrors
  FunctionEnd
  Function SetEmacs
    IfFileExists "$R9\bin" 0 end
    StrCpy $R1 "$R9\bin"
    end:
      StrCpy $0 1
      Push $0
  FunctionEnd    
  
#+END_SRC

