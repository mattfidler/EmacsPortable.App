#+TITLE: Shared Download Code
#+AUTHOR: Matthew L. Fidler
#+PROPERTY: tangle EmacsDownloadShared.nsh
* Macros
** Download Emacs Binaries
#+BEGIN_SRC nsis
  !define getEmacsWin `!insertmacro getEmacsWin`
  !macro getEmacsWin VER
    ReadINIStr $R0 "$INSTDIR\App\ini\mirrors.ini" "${VER}" "win"
    inetc::get  $R0 "$TEMP\emacs.zip"
    ## Some emacs releases (Like Emacs 24.1-rc) extract to a different version.
    SetOutPath "$TEMP\ep\em"
    ExecWait '"$EXEDIR\App\7z\7zG.exe" x "$TEMP\emacs.zip" -o"$TEMP\ep\em"'
    FindFirst $0 $1 $TEMP\ep\em\emacs-*.*
    loop_ver_emacs_win:
      StrCmp $1 "" done_ver_emacs_win
      IfFileExists "$INSTDIR\App\emacs-${VER}" +2 0 
      CopyFiles "$TEMP\ep\em\$1" "$INSTDIR\App\emacs-${VER}"
      FindNext $0 $1
      Goto loop_ver_emacs_win
    done_ver_emacs_win:
      FindClose $0
      RmDir /r "$TEMP\ep\em"
      Delete "$TEMP\emacs.zip"
  !macroend
  
  !define getEmacsMac `!insertmacro getEmacsMac`
  !macro getEmacsMac VER
    ${If} ${FileExists} "$INSTDIR\App\emacs-${VER}"
      ${If} ${FileExists} "$INSTDIR\App\emacs-${VER}\MacOS"
        DetailPrint "Mac OS Binaries already found."
      ${Else}
        ReadINIStr $R1 "$INSTDIR\App\ini\mirrors.ini" "${VER}" "mac"
        ${IfNot} ${FileExists} "$TEMP\emacsMac\EmacsMac.dmg"
          SetOutPath "$TEMP\emacsMac"
          inetc::get $R1 "$TEMP\emacsMac\emacsMac.dmg"
        ${EndIf}
        SetOutPath $TEMP\emacsMac
        ExecWait '"$EXEDIR\App\7z\7zG.exe" e EmacsMac.dmg 2.hfs'
        ${If} ${FileExists} "$TEMP\emacsMac\2.hfs"
          ExecWait  '"$EXEDIR\App\7z\7zG.exe" x -y 2.hfs"'
          ${If} ${FileExists} "$TEMP\emacsMac\Emacs\Emacs.app\Contents\MacOS"
            CopyFiles /SILENT "$TEMP\emacsMac\Emacs\Emacs.app\Contents\MacOS" \
                "$INSTDIR\App\emacs-${VER}\MacOS"
          ${EndIf}
        ${Else}
          DetailPrint "Could not find 2.hfs"
        ${EndIf}
        RmDir /R "$TEMP\emacsMac"
      ${EndIf}
    ${Else}
      DetailPrint "Cannot Locate Windows Emacs Binaries for Emacs ${VER}, Skipping Mac install."
    ${EndIf}
    
  !macroend
  
#+END_SRC


** Mark Installed Macros
This marks a section as installed and makes it read-only
#+BEGIN_SRC nsis
  !define ifSecNotRO `!insertmacro ifSecNotRO`
  !macro ifSecNotRO SEC JMP_IF_TRUE
    ClearErrors
    SectionGetFlags ${SEC} $0
    IfErrors 0 +4
    ClearErrors
    MessageBox MB_OK "Section ${SEC} out of range"
    Goto ${JMP_IF_TRUE}
    IntOp $0 $0 & ${SF_RO}
    StrCmp "0" "$0" ${JMP_IF_TRUE}
  !macroend
  
  
  !define ifSecRO `!insertmacro ifSecRO`
  !macro ifSecRO SEC JMP_IF_TRUE
    ClearErrors
    SectionGetFlags ${SEC} $0
    IfErrors 0 +4
    ClearErrors
    MessageBox MB_OK "Section ${SEC} out of range"
    Goto +3
    IntOp $0 $0 & ${SF_RO}
    StrCmp "0" "$0" 0 ${JMP_IF_TRUE}
  !macroend
  
  !define ifSecNotHidden `!insertmacro ifSecNotHidden`
  !macro ifSecNotHidden SEC JMP
    ClearErrors
    SectionGetText ${SEC} $0
    IfErrors 0 +4
    ClearErrors
    MessageBox MB_OK "Section ${SEC} out of range"
    Goto +2
    StrCmp "" "$0" 0 ${JMP}
  !macroend
  
  !define setInstallIfExists `!insertmacro setInstallIfExists`
  !macro setInstallIfExists FILE SEC
    ClearErrors
    IfFileExists "${FILE}" 0 +10
    SectionGetFlags ${SEC} $0
    IfErrors 0 +3
    MessageBox MB_OK "Section ${SEC} out of range$\nIfFileExists: ${FILE}"
    Goto +6
    IntOp $0 ${SF_RO} | $0
    SectionSetFlags ${SEC} $0
    SectionGetText ${SEC} $0
    StrCpy $0 "$0 (Installed)"
    SectionSetText ${SEC} $0
  !macroend
  
  !define setInstall `!insertmacro setInstall`
  !macro setInstall SEC
    SectionGetFlags ${SEC} $0
    IfErrors 0 +3
    MessageBox MB_OK "Section ${SEC} out of range"
    Goto +6
    IntOp $0 ${SF_RO} | $0
    SectionSetFlags ${SEC} $0
    SectionGetText ${SEC} $0
    StrCpy $0 "$0 (Installed)"
    SectionSetText ${SEC} $0
  !macroend
  
  !define setInstallGroup `!insertmacro setInstallGroup`
  !macro setInstallGroup SEC
    ClearErrors
    SectionGetFlags ${SEC} $0
    IfErrors 0 +3
    MessageBox MB_OK "Section ${SEC} out of range"
    Goto +6
    IntOp $0 ${SF_RO} | $0
    SectionSetFlags ${SEC} $0
    SectionGetText ${SEC} $0
    StrCpy $0 "$0 (Installed)"
    SectionSetText ${SEC} $0
  !macroend
  
  !define setChkRO `!insertmacro setChkRO`
  
  !macro setChkRO SEC
    ${ifSecRO} ${SEC} is_ro_dont_check_${SEC}
    SectionSetFlags ${SEC} 17
    is_ro_dont_check_${SEC}:
      ClearErrors
  !macroend
  
  !macro setChk SEC
    ${ifSecRO} ${SEC} is_dont_check_${SEC}
    SectionSetFlags ${SEC} ${SF_SELECTED}
    is_dont_check_${SEC}:
      ClearErrors
  !macroend
  
#+END_SRC
** Select Section If Other section is selected
When this a section SEC is selected, either check OTHER_SEC or leave
it alone when OTHER_SEC is read-only.
#+BEGIN_SRC nsis
  !define selectSectionIf `!insertmacro selectSectionIf`
  !macro selectSectionIf SEC_CHECKED SEC_TO_SELECT
    SectionGetFlags ${SEC_CHECKED} $0
    IntOp $0 $0 & ${SF_SELECTED}
    StrCmp "$0" "0" +5 0
    SectionGetFlags ${SEC_TO_SELECT} $0
    IntOp $0 $0 & ${SF_RO}
    StrCmp "$0" "0" 0 +2
    SectionSetFlags ${SEC_TO_SELECT} ${SF_SELECTED}
  !macroend
  
#+END_SRC
** Portable App Macro
#+BEGIN_SRC nsis
  !macro installPortableApp WHAT
    ReadINIStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "${WHAT}" "url"
    IfErrors end
    ReadINIStr $R9 "$INSTDIR\App\ini\gw32-install.ini" "${WHAT}" "type"
    IfErrors exe_type
    StrCpy $R9 ".$R9"
    Goto use_inetc
    exe_type:
      ClearErrors
      StrCpy $R9 ".exe"
    use_inetc:
      IfFileExists "$TEMP\portable$R9" found
      inetc::get /NOCOOKIES /TRANSLATE "Downloading ..." \
          "Connecting..." second minute hour s "%dkB (%d%%) of %dkB @ %d.%01dkB/s" \
          " (%d %s%s remaining)" $R0 "$TEMP\portable$R9" /END
      IfFileExists "$TEMP\portable$R9" found not_found
    not_found:
      IfFileExists "$INSTDIR\App\gw32\wget.exe" +3 0
      DetailPrint "Wget not found in App\gw32"
      Goto end
      DetailPrint "Download of ${WHAT} failed, trying wget with proxy setting set"
      ${SetupProxy}
      Pop $0
      IfFileExists "$INSTDIR\Data\ini\proxy-$PROXY_IDE.ini" read_proxy set_proxy
    set_proxy:
      IfFileExists "$INSTDIR\App\eps\set-proxy.exe" +3 0
      DetailPrint "Could not set proxy, assume no proxy settings are needed"
      Goto wget
      ExecWait "$INSTDIR\App\eps\set-proxy.exe"
      goto read_proxy
    read_proxy:
      IfFileExists "$INSTDIR\Data\ini\proxy-$PROXY_IDE.ini" 0 wget
      ReadIniStr $R0 "$INSTDIR\Data\ini\proxy-$PROXY_IDE.ini" "Proxy" "Server"
      blowfish::decrypt $R0 "$PROXY_ID"
      Pop $R0
      Pop $R0
      StrCmp "$R0" "" end
      StrCpy "$R1" "$R0"
      ReadIniStr "$R0" "$INSTDIR\Data\ini\proxy-$PROXY_IDE.ini" "Proxy" "Port"
      blowfish::decrypt $R0 "$PROXY_ID"
      Pop $R0
      Pop $R0
      StrCmp "$R0" "" +2 0
      StrCpy "$R1" "$R1:$R0"
      ReadIniStr "$R0" "$INSTDIR\Data\ini\proxy-$PROXY_IDE.ini" "Proxy" "User"
      blowfish::decrypt $R0 "$PROXY_ID"
      Pop $R0
      Pop $R0
      StrCmp "$R0" "" +2 0
      StrCpy "$R2" "$R0"
      ReadIniStr "$R0" "$INSTDIR\Data\ini\proxy-$PROXY_IDE.ini" "Proxy" "Password"
      blowfish::decrypt $R0 "$PROXY_ID"
      Pop $R0
      Pop $R0
      StrCmp "$R0" "" +3 0
      StrCmp "$R2" "" +2 0
      StrCpy "$R2" "$R2:$R0"
      StrCmp "$R2" "" +2 0
      StrCpy "$R1" "$R2@$R1"
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("HTTP_PROXY","http://$R1").r0'
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("HTTPS_PROXY","http://$R1").r0'
      System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("FTP_PROXY","ftp://$R1").r0'
      ${PathIfExist} "$INSTDIR\App\gw32"
    wget:
      ReadINIStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "${WHAT}" "url"
      ExecWait "$INSTDIR\App\gw32\wget.exe $R0 -O$TEMP\portable$R9"
      IfFileExists "$TEMP\portable$R9" found 0
      DetailPrint "Could not get file with wget either, skipping."
    found:
      StrCmp "$R9" ".exe" is_exe
      StrCmp "$R9" ".7z" is_7z
      StrCmp "$R9" ".zip" is_zip
      Goto end
    is_zip:
      ReadINIStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "${WHAT}" "out"
      ClearErrors
      SetOutPath "$PA\$R0"
      ExecWait '"$0" x "$TEMP\portable.zip" -o"$PA\$R0"'
      Delete "$TEMP\portable.zip"
      Goto end
    is_7z:
      ReadINIStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "${WHAT}" "out"
      ClearErrors
      SetOutPath "$PA\$R0"
      Nsis7z::ExtractWithDetails "$TEMP\portable.7z" "Installing package ${WHAT}..."
      Delete "$TEMP\portable.7z"
      Goto end
    is_exe:
      ExecWait "$TEMP\portable.exe"
      Delete "$TEMP\portable.exe"
    end:
      ClearErrors
  !macroend
  !define installPA `!insertmacro installPortableApp`
  
#+END_SRC
** Emacs Version Initialization 
#+BEGIN_SRC nsis
  !macro INI_VERS
    StrCpy $nemacs 0
    ${Locate} "$INSTDIR\App" "/L=D /M=emacs-* /S= /G=0" "SetValues"
    StrCmp "$INSTDIR" "$EXEDIR" +2
    StrCpy $nemacs 0
    StrCmp "$nemacs" "0" 0 +3
    SectionSetFlags ${sec_emacs_default} ${SF_SELECTED}
    SectionSetFlags ${sec_emacs_default_mac} ${SF_SELECTED}
  !macroend
  !define INI_VERS `!insertmacro INI_VERS`
  
#+END_SRC

** Get Full Plugin Macro
#+BEGIN_SRC nsis
!macro getPluginFull NAME
    StrCmp "$PA" "" 0 download
    ${GetDrives} "FDD+HDD" "GetDriveVars"
    StrCmp "$PA" "" 0 download
    MessageBox MB_OK "Cannot Install ${NAME} Plugin; Can't determine PortableApps Location."
    download:
      ReadINIStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "nsis:${NAME}" "url"
      inetc::get $R0 "$TEMP\${NAME}.zip"
      ExecWait '"$EXEDIR\App\7z\7zg.exe" x "$TEMP\${NAME}.zip" -o"$PA\NSISPortableANSI\App\NSIS"'
      Delete "$TEMP\${NAME}.zip"
    end:
      #
  !macroend
#+END_SRC


** Path if Exist Macro
#+BEGIN_SRC nsis
!macro _PathIfExist ARG1
  DetailPrint "Checking for ${ARG1}"
  StrCpy $9 ""
  IfFileExists "${ARG1}" 0 +4
  System::Call 'Kernel32::GetEnvironmentVariable(t , t, i) i("PATH", .r0, ${NSIS_MAX_STRLEN}).r1'
  System::Call 'Kernel32::SetEnvironmentVariableA(t, t) i("PATH", "${ARG1};$0").r3'StrCpy $9 "1"
!macroend

!define PathIfExist '!insertmacro "_PathIfExist"'
#+END_SRC
** Download Zip File Macro
#+BEGIN_SRC nsis
  !define DOWN '!insertmacro DOWN'  
  !macro DOWN VAL OUT
    SectionGetFlags ${sec_use_git_instead_of_zip} $0
    IntOp $0 $0 & ${SF_SELECTED}
    StrCmp "0" $0 zip git
    zip:
      ReadIniStr $R1 "$INSTDIR\App\ini\gw32-install.ini" "${VAL}" "ver"
      ReadIniStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "${VAL}" "base"
      ReadIniStr $R2 "$INSTDIR\App\ini\gw32-install.ini" "${VAL}" "ext"
      inetc::get "$R0$R1$R2" "$TEMP\${VAL}.zip"
      IfFileExists "$TEMP\${VAL}.zip" +3 0
      DetailPrint "Could not Download ${VAL}, skipping."
      Goto +2
      ExecWait '"$EPEXE\App\7z\7zG.exe" x "$TEMP\${VAL}.zip" -o"${OUT}"'
      Delete "$TEMP\${VAL}.zip"
      Goto end
    git:
      ReadIniStr $R0 "$INSTDIR\App\ini\gw32-install.ini" "${VAL}" "git"
      ReadIniStr $R1 "$INSTDIR\App\ini\gw32-install.ini" "${VAL}" "gitout"
      IfErrors 0 +3
      ClearErrors
      Goto zip
      ClearErrors
      DetailPrint "$PG clone $R0 ${OUT}\$R1"
      ExecWait "$PG clone $R0 ${OUT}\$R1"
      ReadIniStr "$R0" "$INSTDIR\App\ini\gw32-install.ini" "${VAL}" "github"
      IfErrors end
      ExecWait "$PG remote add --track master github $R0"
      Goto end
    end:
      ClearErrors
  !macroend
  
#+END_SRC


** GnuWin32
*** GnuWin32 Utilities Download
#+BEGIN_SRC nsis
  !macro  g32exist WHAT GO
    IfFileExists "$EPEXE\App\ini\gw32.ini" 0 g32exist_skip
    
    g32exist_skip:
      ClearErrors
  !macroend
  
  !macro g32down WHAT
    ReadINIStr $R0 "$EPEXE\App\ini\gw32-install.ini" "gw32:${WHAT}" "bin.exe"
    IfErrors g32_zip
    SetOutPath "$EPEXE\App\gw32\bin"
    inetc::get $R0 "$EPEXE\App\gw32\bin\${WHAT}.exe"
    WriteIniStr "$EPEXE\App\ini\gw32.ini" "${WHAT}.bin" "${WHAT}.exe" "1"
    Goto g32_exit
    g32_zip:
      ReadINIStr $R0 "$EPEXE\App\ini\gw32-install.ini" "gw32:${WHAT}" "bin.zip"
      IfErrors g32_download
      inetc::get  $R0 "$TEMP\${WHAT}-bin.zip" 
      IfFileExists "$TEMP\${WHAT}-bin.zip" 0 g32_exit
      
      nsExec::ExecToLog /OEM '"$EPEXE\App\7z\7z.exe" x "$TEMP\${WHAT}-bin.zip" -o"$TEMP\ep-gw32"'
      StrCpy $R0 "${WHAT}"
      StrCpy $R1 "bin"
      ${Locate} "$TEMP\ep-gw32" "" "AddGW"
      RmDir /r "$TEMP\ep-gw32"
      Delete "$TEMP\${WHAT}-bin.zip" 
      ReadINIStr $R0 "$EPEXE\App\ini\gw32-install.ini" "gw32:${WHAT}" "dep.zip"
      IfErrors g32_exit
      inetc::get  $R0 "$TEMP\${WHAT}-dep.zip"
      IfFileExists "$TEMP\${WHAT}-dep.zip" 0 g32_exit
      RmDir /r "$TEMP\ep-gw32"
      nsExec::ExecToLog /OEM '"$EPEXE\App\7z\7z.exe" x "$TEMP\${WHAT}-dep.zip" -o"$TEMP\ep-gw32"'
      SetOutPath "$EPEXE\App\gw32"
      StrCpy $R0 "${WHAT}"
      StrCpy $R1 "dep"
      ${Locate} "$TEMP\ep-gw32" "" "AddGW"
      RmDir /r "$TEMP\ep-gw32"
      Delete "$TEMP\${WHAT}-dep.zip"
    g32_download:
      ClearErrors
      inetc::get  \
          "http://gnuwin32.sourceforge.net/downlinks/${WHAT}-bin-zip.php" \
          "$TEMP\${WHAT}-bin.zip" 
      IfFileExists "$TEMP\${WHAT}-bin.zip" 0 g32_exit
      RmDir /r "$TEMP\ep-gw32"
      nsExec::ExecToLog /OEM '"$EPEXE\App\7z\7z.exe" x "$TEMP\${WHAT}-bin.zip" -o"$TEMP\ep-gw32"'
      SetOutPath "$EPEXE\App\gw32"
      StrCpy $R0 "${WHAT}"
      StrCpy $R1 "bin"
      ${Locate} "$TEMP\ep-gw32" "" "AddGW" 
      RmDir /r "$TEMP\ep-gw32"
      Delete "$TEMP\${WHAT}-bin.zip"
      inetc::get \              
          "http://gnuwin32.sourceforge.net/downlinks/${WHAT}-dep-zip.php" \
          "$TEMP\${WHAT}-dep.zip"
      IfFileExists "$TEMP\${WHAT}-dep.zip" 0 g32_exit
      RmDir /r "$TEMP\ep-gw32"
      nsExec::ExecToLog /OEM '"$EPEXE\App\7z\7z.exe" x "$TEMP\${WHAT}-dep.zip" -o"$TEMP\ep-gw32"'
      SetOutPath "$EPEXE\App\gw32"
      StrCpy $R1 "dep"
      ${Locate} "$TEMP\ep-gw32" "" "AddGW"
      RmDir /r "$TEMP\ep-gw32"
      Delete "$TEMP\${WHAT}-dep.zip"
    g32_exit:
      ClearErrors
  !macroend
  
  Function AddGW
    StrLen $0 "$TEMP\ep-gw32\"
    StrCpy "$R4" "$R8" "" $0
    StrCpy "$R5" "$R9" "" $0
    StrCmp $R6 "" is_dir is_file
    is_dir:
      DetailPrint "Create Directory $R5"
      CreateDirectory "$EPEXE\App\gw32\$R5"
      Goto end
    is_file:
      WriteINIStr "$EPEXE\App\ini\gw32.ini" "$R0.$R1" "$R5" "1"
      StrCmp "$R1" "dep" 0 skip_dep
      WriteINIStr "$EPEXE\App\ini\gw32.ini" "$R5" "$R0" "1"
    skip_dep:
      DetailPrint "Copy File $R5 to $R4"
      CopyFiles /SILENT "$TEMP\ep-gw32\$R5" "$EPEXE\App\gw32\$R4"
    end:
      ClearErrors
      StrCpy $0 1
      Push $0
  FunctionEnd
  
#+END_SRC

*** GnuWin32 Set for download
#+BEGIN_SRC nsis
  !macro setg32down WHAT
    SetOutPath "$TEMP\ep"
    WriteINIStr "$TEMP\ep\unix-download.ini" "gw32" "${WHAT}" "1"
    DetailPrint "Requesting ${WHAT} installation"
  !macroend
#+END_SRC


*** GnuWin32 Remove 
This removes a gnuwin32 package.
#+BEGIN_SRC nsis
  !macro g32rm INI PATH WHAT
    IfFileExists "${INI}" 0 g32rmnotinstalled_${WHAT}
    EnumINI::SectionExist "${INI}" "${WHAT}.bin"
    Pop $R0
    StrCmp "$R0" "1" 0 g32rmnotinstalled_${WHAT}
    EnumINI::Section "${INI}" "${WHAT}.bin"
    Pop $R0
    StrCmp "$R0" error g32rmnotinstalled_${WHAT}
    loop_g32rm_${WHAT}:
      IntCmp $R0 "0" loop_g32rm_${WHAT}_done loop_g32rm_${WHAT}_done 0
      Pop $R1
      Delete "${PATH}\$R1"
      IntOp $R0 $R0 - 1
      Goto loop_g32rm_${WHAT}
    loop_g32rm_${WHAT}_done:
      DeleteIniSec "${INI}" "${WHAT}.bin"
      ## Try to remove dependencies
      EnumINI::Section "${INI}" "${WHAT}.dep"
      Pop $R0
      StrCmp "$R0" error g32rmnotinstalled_${WHAT}
    loop_g32rm_dep_${WHAT}:
      IntCmp $R0 "0" loop_g32rm_dep_${WHAT}_done loop_g32rm_dep_${WHAT}_done 0
      Pop $R1
      EnumINI::Section "${INI}" "$R1"
      Pop $R2
      StrCmp "$R2" error g32nodep_${WHAT}
      StrCmp "$R2" "1" g32depdel_${WHAT}
    loop_g32rm_dep_${WHAT}2:
      IntCmp $R2 "0" loop_g32rm_dep_${WHAT}_done2 loop_g32rm_dep_${WHAT}_done2 0
      Pop $R3
      IntOp $R2 $R2 - 1
      Goto loop_g32rm_dep_${WHAT}2
    loop_g32rm_dep_${WHAT}_done2:
      DeleteIniStr "${INI}" "$R1" "${WHAT}"
      Goto g32nodep_${WHAT}
    g32depdel_${WHAT}:
      Pop $R2
      StrCmp "$R2" "${WHAT}" 0 g32nodep_${WHAT}
      Delete "${PATH}\$R1"
      DeleteIniSec "${INI}" "${WHAT}.dep"
    g32nodep_${WHAT}:
      IntOp $R0 $R0 - 1
      Goto loop_g32rm_dep_${WHAT}
    loop_g32rm_dep_${WHAT}_done: 
      DeleteIniSec "${INI}" "${WHAT}.dep"
      
    g32rmnotinstalled_${WHAT}:
    ClearErrors
  !macroend
  !define g32rm `!insertmacro g32rm "$INSTDIR\App\ini\gw32.ini" "$INSTDIR\App\gw32"`
#+END_SRC

*** GnuWin32 Is Installed?
#+BEGIN_SRC nsis
  !macro g32installed PREFIX INI PATH WHAT SEC
    IfFileExists "${INI}" 0 "${PREFIX}notinstalled_${WHAT}_${SEC}"
    EnumINI::SectionExist "${INI}" "${WHAT}.bin"
    Pop $R0
    StrCmp "$R0" "1" 0 "${PREFIX}notinstalled_${WHAT}_${SEC}"
    EnumINI::Section "${INI}" "${WHAT}.bin"
    Pop $R0
    StrCmp "$R0" "error" "${PREFIX}notinstalled_${WHAT}_${SEC}"
    StrCpy $R3 "1"
    "loop_${PREFIX}_${WHAT}_${SEC}:"
      IntCmp $R0 "0" "loop_${PREFIX}_${WHAT}_${SEC}_done" "loop_${PREFIX}_${WHAT}_${SEC}_done" 0
      Pop $R1
      StrCmp $R3 "0" +3
      IfFileExists "${PATH}\$R1" +2
      StrCpy $R3 "0"
      IntOp $R0 $R0 - 1
      Goto "loop_${PREFIX}_${WHAT}_${SEC}"
    "loop_${PREFIX}_${WHAT}_${SEC}_done:"
      StrCmp $R3 "0" "${PREFIX}notinstalled_${WHAT}_${SEC}" "${PREFIX}installed_${WHAT}_${SEC}"
      "${PREFIX}installed_${WHAT}_${SEC}:"
      SectionGetFlags ${SEC} $0
      IntOp $0 ${SF_RO} | $0
      SectionSetFlags ${SEC} $0
      SectionGetText ${SEC} $0
      StrCpy $0 "$0 (Installed)"
      SectionSetText ${SEC} $0
      "${PREFIX}notinstalled_${WHAT}_${SEC}:"
      ClearErrors  
  !macroend
  !define g32installed `!insertmacro g32installed "g32" "$INSTDIR\App\ini\gw32.ini" "$INSTDIR\App\gw32"`
  !macro g32removed PREFIX INI PATH WHAT SEC
    IfFileExists "${INI}" 0 "r${PREFIX}notinstalled_${WHAT}_${SEC}"
    EnumINI::SectionExist "${INI}" "${WHAT}.bin"
    Pop $R0
    StrCmp "$R0" "1" 0 "r${PREFIX}notinstalled_${WHAT}_${SEC}"
    EnumINI::Section "${INI}" "${WHAT}.bin"
    Pop $R0
    StrCmp "$R0" "error" "r${PREFIX}notinstalled_${WHAT}_${SEC}"
    StrCpy $R3 "1"
    "loop_r${PREFIX}_${WHAT}_${SEC}:"
      IntCmp $R0 "0" "loop_r${PREFIX}_${WHAT}_${SEC}_done" "loop_r${PREFIX}_${WHAT}_${SEC}_done" 0
      Pop $R1
      StrCmp $R3 "0" +3
      IfFileExists "${PATH}\$R1" +2
      StrCpy $R3 "0"
      IntOp $R0 $R0 - 1
      Goto "loop_r${PREFIX}_${WHAT}_${SEC}"
    "loop_r${PREFIX}_${WHAT}_${SEC}_done:"
      StrCmp $R3 "0" "r${PREFIX}notinstalled_${WHAT}_${SEC}" "r${PREFIX}installed_${WHAT}_${SEC}"
    "r${PREFIX}notinstalled_${WHAT}_${SEC}:"
      SectionGetFlags ${SEC} $0
      IntOp $0 ${SF_RO} | $0
      SectionSetFlags ${SEC} $0
      SectionSetText ${SEC} ""
    "r${PREFIX}installed_${WHAT}_${SEC}:"
      ClearErrors
      
  !macroend
  !define g32removed `!insertmacro g32removed "g32" "$INSTDIR\App\ini\gw32.ini" "$INSTDIR\App\gw32"`
  
#+END_SRC

** EzWindows Ports
*** EzWindows Download 
#+BEGIN_SRC nsis
  !macro  ezwinexist WHAT GO
    IfFileExists "$EPEXE\App\ini\ezwin.ini" 0 ezwinexist_skip
    ezwinexist_skip:
      ClearErrors
  !macroend
  
  !macro ezwindown WHAT
    ClearErrors
    ReadIniStr $R0 "$EPEXE\App\ini\gw32-install.ini" "ezw:${WHAT}" "ver"
    IfErrors ezwin_exit 
    inetc::get  \
        "http://downloads.sourceforge.net/project/ezwinports/${WHAT}-$R0-bin.zip" \
        "$TEMP\${WHAT}-bin.zip" 
    IfFileExists "$TEMP\${WHAT}-bin.zip" 0 ezwin_exit
    RmDir /r "$TEMP\ep\ezwin"
    nsExec::ExecToLog /OEM '"$EPEXE\App\7z\7z.exe" x "$TEMP\${WHAT}-bin.zip" -o"$TEMP\ep-ezwin"'
    SetOutPath "$EPEXE\App\ezwin"
    StrCpy $R0 "${WHAT}"
    ${Locate} "$TEMP\ep-ezwin" "" "AddEZW"
    Sleep 5
    RmDir /r "$TEMP\ep-ezwin"
    Delete "$TEMP\${WHAT}-bin.zip"
    ezwin_exit:
      ClearErrors
  !macroend
  
  !macro InsertAddEZW
    Function AddEZW
      StrLen $R2 "$TEMP\ep-ezwin\"
      StrCpy "$R4" "$R8" "" $R2
      StrCpy "$R5" "$R9" "" $R2
      StrCmp $R6 "" is_dir is_file
      is_dir:
        CreateDirectory "$EPEXE\App\ezwin\$R5"
        Goto end
      is_file:
        IfFileExists "$EPEXE\App\ezwin\$R5" found_file new_file
      found_file:
        WriteINIStr "$EPEXE\App\ini\ezwin.ini" "$R0.dep" "$R5" "1"
        WriteINIStr "$EPEXE\App\ini\ezwin.ini" "$R5" "$R0" "1"
        ## Look for the same file in one of the binary sections
        Call PushEZW
        Pop $R1
      loop_look_bin:
        IntCmp $R1 0 end end 0
        Pop $R2
        StrCmp "$R2" "$R0" next_iter
        EnumINI::SectionExist "$EPEXE\App\ini\ezwin.ini" "$R2.bin"
        Pop $R3
        IntCmp "$R3" "0" next_iter
        EnumINI::KeyExist "$EPEXE\App\ini\ezwin.ini" "$R2.bin" "$R5"
        Pop $R3
        IntCmp "$R3" "0" next_iter
        DeleteIniStr "$EPEXE\App\ini\ezwin.ini" "$R2.bin" "$R5"
        WriteINIStr "$EPEXE\App\ini\ezwin.ini" "$R2.dep" "$R5" "1"
        WriteINIStr "$EPEXE\App\ini\ezwin.ini" "$R5" "$R2" "1"
      next_iter:
        IntOp $R1 $R1 - 1
        Goto loop_look_bin
      new_file:
        WriteINIStr "$EPEXE\App\ini\ezwin.ini" "$R0.bin" "$R5" "1" 
        CopyFiles /SILENT "$TEMP\ep-ezwin\$R5" "$EPEXE\App\ezwin\$R4"
      end:
        ClearErrors
        Push $R5
    FunctionEnd
  !macroend
  
#+END_SRC
*** EzWindows Set for download
#+BEGIN_SRC nsis
!macro setezwindown WHAT
    SetOutPath "$TEMP\ep"
    WriteINIStr "$TEMP\ep\unix-download.ini" "ezw" "${WHAT}" "1"
    DetailPrint "Requesting ${WHAT} installation"
  !macroend
#+END_SRC

*** EzWindows Add/Remove/Exists
#+BEGIN_SRC nsis
  !define ezwinrm `!insertmacro g32rm "$INSTDIR\App\ini\ezwin.ini" "$INSTDIR\App\ezwin"`
  !define ezwininstalled `!insertmacro g32installed "ezwin" "$INSTDIR\App\ini\ezwin.ini" "$INSTDIR\App\ezwin"`
  !define rezwinremoved `!insertmacro g32removed "ezwin" "$INSTDIR\App\ini\ezwin.ini" "$INSTDIR\App\ezwin"`
  
#+END_SRC

